{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{378:function(e,s,n){\"use strict\";n.r(s);var t=n(45),o=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"promise面试题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#promise面试题\"}},[e._v(\"#\")]),e._v(\" Promise面试题\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_1-promise的几道基础题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-promise的几道基础题\"}},[e._v(\"#\")]),e._v(\" 1. Promise的几道基础题\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_1-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-题目一\"}},[e._v(\"#\")]),e._v(\" 1.1 题目一\")]),e._v(\" \"),n(\"div\",{staticClass:\"language-javascript extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"const\")]),e._v(\" promise1 \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"new\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[e._v(\"Promise\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[e._v(\"resolve\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" reject\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=>\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n  console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v(\"'promise1'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\"\\nconsole\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v(\"'1'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" promise1\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"从上至下，先遇到\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"，执行该构造函数中的代码\"),n(\"code\",[e._v(\"promise1\")])]),e._v(\" \"),n(\"li\",[e._v(\"然后执行同步代码\"),n(\"code\",[e._v(\"1\")]),e._v(\"，此时\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"没有被\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"或者\"),n(\"code\",[e._v(\"reject\")]),e._v(\"，因此状态还是\"),n(\"code\",[e._v(\"pending\")])])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'promise1'\\n'1' Promise{<pending>}\\n\")])])]),n(\"h4\",{attrs:{id:\"_1-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-题目二\"}},[e._v(\"#\")]),e._v(\" 1.2 题目二\")]),e._v(\" \"),n(\"div\",{staticClass:\"language-javascript extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"const\")]),e._v(\" promise \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"new\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[e._v(\"Promise\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[e._v(\"resolve\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\",\")]),e._v(\" reject\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=>\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n  console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"1\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"resolve\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v(\"'success'\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\"\\n  console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"2\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\npromise\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"then\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=>\")]),e._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"{\")]),e._v(\"\\n  console\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"3\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"}\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\nconsole\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token function\"}},[e._v(\"log\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"4\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\")\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[e._v(\";\")]),e._v(\"\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"从上至下，先遇到\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"，执行其中的同步代码\"),n(\"code\",[e._v(\"1\")])]),e._v(\" \"),n(\"li\",[e._v(\"再遇到\"),n(\"code\",[e._v(\"resolve('success')\")]),e._v(\"， 将\"),n(\"code\",[e._v(\"promise\")]),e._v(\"的状态改为了\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"并且将值保存下来\")]),e._v(\" \"),n(\"li\",[e._v(\"继续执行同步代码\"),n(\"code\",[e._v(\"2\")])]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"promise\")]),e._v(\"，往下执行，碰到\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"这个微任务，将其加入微任务队列\")]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"4\")])]),e._v(\" \"),n(\"li\",[e._v(\"本轮宏任务全部执行完毕，检查微任务队列，发现\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"这个微任务且状态为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"，执行它。\")])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1 2 4 3\\n\")])])]),n(\"h4\",{attrs:{id:\"_1-3-题目三\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-题目三\"}},[e._v(\"#\")]),e._v(\" 1.3 题目三\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const promise = new Promise((resolve, reject) => {\\n  console.log(1);\\n  console.log(2);\\n});\\npromise.then(() => {\\n  console.log(3);\\n});\\nconsole.log(4);\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"过程分析\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"和题目二相似，只不过在\"),n(\"code\",[e._v(\"promise\")]),e._v(\"中并没有\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"或者\"),n(\"code\",[e._v(\"reject\")])]),e._v(\" \"),n(\"li\",[e._v(\"因此\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"并不会执行，它只有在被改变了状态之后才会执行。\")])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1 2 4\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_1-4-题目四\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-题目四\"}},[e._v(\"#\")]),e._v(\" 1.4 题目四\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const promise1 = new Promise((resolve, reject) => {\\n  console.log('promise1')\\n  resolve('resolve1')\\n})\\nconst promise2 = promise1.then(res => {\\n  console.log(res)\\n})\\nconsole.log('1', promise1);\\nconsole.log('2', promise2);\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"从上至下，先遇到\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"，执行该构造函数中的代码\"),n(\"code\",[e._v(\"promise1\")])]),e._v(\" \"),n(\"li\",[e._v(\"碰到\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"函数, 将\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"的状态改变为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\", 并将结果保存下来\")]),e._v(\" \"),n(\"li\",[e._v(\"碰到\"),n(\"code\",[e._v(\"promise1.then\")]),e._v(\"这个微任务，将它放入微任务队列\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"promise2\")]),e._v(\"是一个新的状态为\"),n(\"code\",[e._v(\"pending\")]),e._v(\"的\"),n(\"code\",[e._v(\"Promise\")])]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"1\")]),e._v(\"， 同时打印出\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"的状态是\"),n(\"code\",[e._v(\"resolved\")])]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"2\")]),e._v(\"，同时打印出\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"的状态是\"),n(\"code\",[e._v(\"pending\")])]),e._v(\" \"),n(\"li\",[e._v(\"宏任务执行完毕，查找微任务队列，发现\"),n(\"code\",[e._v(\"promise1.then\")]),e._v(\"这个微任务且状态为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"，执行它。\")])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'promise1'\\n'1' Promise{<resolved>: 'resolve1'}\\n'2' Promise{<pending>}\\n'resolve1'\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_1-5-题目五\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-题目五\"}},[e._v(\"#\")]),e._v(\" 1.5 题目五\")]),e._v(\" \"),n(\"p\",[e._v(\"接下来看看这道题：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const fn = () => (new Promise((resolve, reject) => {\\n  console.log(1);\\n  resolve('success')\\n}))\\nfn().then(res => {\\n  console.log(res)\\n})\\nconsole.log('start')\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"这道题里最先执行的是\"),n(\"code\",[e._v(\"'start'\")]),e._v(\"吗 🤔️ ？\\n请仔细看看哦，\"),n(\"code\",[e._v(\"fn\")]),e._v(\"函数它是直接返回了一个\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"的，而且\"),n(\"code\",[e._v(\"fn\")]),e._v(\"函数的调用是在\"),n(\"code\",[e._v(\"start\")]),e._v(\"之前，所以它里面的内容应该会先执行。\\n结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n'start'\\n'success'\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_1-6-题目六\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-题目六\"}},[e._v(\"#\")]),e._v(\" 1.6 题目六\")]),e._v(\" \"),n(\"p\",[e._v(\"如果把\"),n(\"code\",[e._v(\"fn\")]),e._v(\"的调用放到\"),n(\"code\",[e._v(\"start\")]),e._v(\"之后呢？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const fn = () =>\\n  new Promise((resolve, reject) => {\\n    console.log(1);\\n    resolve(\"success\");\\n  });\\nconsole.log(\"start\");\\nfn().then(res => {\\n  console.log(res);\\n});\\n')])])]),n(\"p\",[e._v(\"是的，现在\"),n(\"code\",[e._v(\"start\")]),e._v(\"就在\"),n(\"code\",[e._v(\"1\")]),e._v(\"之前打印出来了，因为\"),n(\"code\",[e._v(\"fn\")]),e._v(\"函数是之后执行的。\\n\"),n(\"strong\",[e._v(\"注意⚠️\")]),e._v(\"：之前我们很容易就以为看到new Promise()就执行它的第一个参数函数了，其实这是不对的，就像这两道题中，我们得注意它是不是被包裹在函数当中，如果是的话，只有在函数调用的时候才会执行。\\n答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('\"start\"\\n1\\n\"success\"\\n')])])]),n(\"h3\",{attrs:{id:\"_2-promise结合settimeout\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-promise结合settimeout\"}},[e._v(\"#\")]),e._v(\" 2. Promise结合setTimeout\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_2-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-题目一\"}},[e._v(\"#\")]),e._v(\" 2.1 题目一\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"console.log('start')\\nsetTimeout(() => {\\n  console.log('time')\\n})\\nPromise.resolve().then(() => {\\n  console.log('resolve')\\n})\\nconsole.log('end')\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"刚开始整个脚本作为一个宏任务来执行，对于同步代码直接压入执行栈进行执行，因此先打印出\"),n(\"code\",[e._v(\"start\")]),e._v(\"和\"),n(\"code\",[e._v(\"end\")]),e._v(\"。\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"setTimout\")]),e._v(\"作为一个宏任务被放入宏任务队列(下一个)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"Promise.then\")]),e._v(\"作为一个微任务被放入微任务队列\")]),e._v(\" \"),n(\"li\",[e._v(\"本次宏任务执行完，检查微任务，发现\"),n(\"code\",[e._v(\"Promise.then\")]),e._v(\"，执行它\")]),e._v(\" \"),n(\"li\",[e._v(\"接下来进入下一个宏任务，发现\"),n(\"code\",[e._v(\"setTimeout\")]),e._v(\"，执行。\")])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'start'\\n'end'\\n'resolve'\\n'time'\\n\")])])]),n(\"h4\",{attrs:{id:\"_2-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-题目二\"}},[e._v(\"#\")]),e._v(\" 2.2 题目二\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const promise = new Promise((resolve, reject) => {\\n  console.log(1);\\n  setTimeout(() => {\\n    console.log(\"timerStart\");\\n    resolve(\"success\");\\n    console.log(\"timerEnd\");\\n  }, 0);\\n  console.log(2);\\n});\\npromise.then((res) => {\\n  console.log(res);\\n});\\nconsole.log(4);\\n')])])]),n(\"p\",[e._v(\"过程分析：\\n和题目\"),n(\"code\",[e._v(\"1.2\")]),e._v(\"很像，不过在\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"的外层加了一层\"),n(\"code\",[e._v(\"setTimeout\")]),e._v(\"定时器。\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"从上至下，先遇到\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"，执行该构造函数中的代码\"),n(\"code\",[e._v(\"1\")])]),e._v(\" \"),n(\"li\",[e._v(\"然后碰到了定时器，将这个定时器中的函数放到下一个宏任务的延迟队列中等待执行\")]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"2\")])]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"promise\")]),e._v(\"函数，遇到\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"，但其状态还是为\"),n(\"code\",[e._v(\"pending\")]),e._v(\"，这里理解为先不执行\")]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"4\")])]),e._v(\" \"),n(\"li\",[e._v(\"一轮循环过后，进入第二次宏任务，发现延迟队列中有\"),n(\"code\",[e._v(\"setTimeout\")]),e._v(\"定时器，执行它\")]),e._v(\" \"),n(\"li\",[e._v(\"首先执行\"),n(\"code\",[e._v(\"timerStart\")]),e._v(\"，然后遇到了\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"，将\"),n(\"code\",[e._v(\"promise\")]),e._v(\"的状态改为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"且保存结果并将之前的\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"推入微任务队列\")]),e._v(\" \"),n(\"li\",[e._v(\"继续执行同步代码\"),n(\"code\",[e._v(\"timerEnd\")])]),e._v(\" \"),n(\"li\",[e._v(\"宏任务全部执行完毕，查找微任务队列，发现\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"这个微任务，执行它。\")])]),e._v(\" \"),n(\"p\",[e._v(\"因此执行结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('1\\n2\\n4\\n\"timerStart\"\\n\"timerEnd\"\\n\"success\"\\n')])])]),n(\"h4\",{attrs:{id:\"_2-3-题目三\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-题目三\"}},[e._v(\"#\")]),e._v(\" 2.3 题目三\")]),e._v(\" \"),n(\"p\",[e._v(\"题目三分了两个题目，因为看着都差不多，不过执行的结果却不一样，大家不妨先猜猜下面两个题目分别执行什么：\\n\"),n(\"strong\",[e._v(\"(1)\")]),e._v(\":\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"setTimeout(() => {\\n  console.log('timer1');\\n  setTimeout(() => {\\n    console.log('timer3')\\n  }, 0)\\n}, 0)\\nsetTimeout(() => {\\n  console.log('timer2')\\n}, 0)\\nconsole.log('start')\\n\")])])]),n(\"p\",[n(\"strong\",[e._v(\"(2)\")]),e._v(\":\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"setTimeout(() => {\\n  console.log('timer1');\\n  Promise.resolve().then(() => {\\n    console.log('promise')\\n  })\\n}, 0)\\nsetTimeout(() => {\\n  console.log('timer2')\\n}, 0)\\nconsole.log('start')\\n\")])])]),n(\"p\",[n(\"strong\",[e._v(\"执行结果：\")])]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'start'\\n'timer1'\\n'timer2'\\n'timer3'\\n\")])])]),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'start'\\n'timer1'\\n'promise'\\n'timer2'\\n\")])])]),n(\"p\",[e._v(\"这两个例子，看着好像只是把第一个定时器中的内容换了一下而已。\\n一个是为定时器\"),n(\"code\",[e._v(\"timer3\")]),e._v(\"，一个是为\"),n(\"code\",[e._v(\"Promise.then\")]),e._v(\"\\n但是如果是定时器\"),n(\"code\",[e._v(\"timer3\")]),e._v(\"的话，它会在\"),n(\"code\",[e._v(\"timer2\")]),e._v(\"后执行，而\"),n(\"code\",[e._v(\"Promise.then\")]),e._v(\"却是在\"),n(\"code\",[e._v(\"timer2\")]),e._v(\"之前执行。\\n你可以这样理解，\"),n(\"code\",[e._v(\"Promise.then\")]),e._v(\"是微任务，它会被加入到本轮中的微任务列表，而定时器\"),n(\"code\",[e._v(\"timer3\")]),e._v(\"是宏任务，它会被加入到下一轮的宏任务中。\\n理解完这两个案例，可以来看看下面一道比较难的题目了。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_2-3-题目三-2\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-题目三-2\"}},[e._v(\"#\")]),e._v(\" 2.3 题目三\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve().then(() => {\\n  console.log('promise1');\\n  const timer2 = setTimeout(() => {\\n    console.log('timer2')\\n  }, 0)\\n});\\nconst timer1 = setTimeout(() => {\\n  console.log('timer1')\\n  Promise.resolve().then(() => {\\n    console.log('promise2')\\n  })\\n}, 0)\\nconsole.log('start');\\n\")])])]),n(\"p\",[e._v(\"这道题稍微的难一些，在\"),n(\"code\",[e._v(\"promise\")]),e._v(\"中执行定时器，又在定时器中执行\"),n(\"code\",[e._v(\"promise\")]),e._v(\"；\\n并且要注意的是，这里的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"是直接\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"的，而之前的\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"不一样。\\n(偷偷告诉你，这道题往下一点有流程图)\\n因此过程分析为：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"刚开始整个脚本作为第一次宏任务来执行，我们将它标记为\"),n(\"strong\",[e._v(\"宏1\")]),e._v(\"，从上至下执行\")]),e._v(\" \"),n(\"li\",[e._v(\"遇到\"),n(\"code\",[e._v(\"Promise.resolve().then\")]),e._v(\"这个微任务，将\"),n(\"code\",[e._v(\"then\")]),e._v(\"中的内容加入第一次的微任务队列标记为\"),n(\"strong\",[e._v(\"微1\")])]),e._v(\" \"),n(\"li\",[e._v(\"遇到定时器\"),n(\"code\",[e._v(\"timer1\")]),e._v(\"，将它加入下一次宏任务的延迟列表，标记为\"),n(\"strong\",[e._v(\"宏2\")]),e._v(\"，等待执行(先不管里面是什么内容)\")]),e._v(\" \"),n(\"li\",[e._v(\"执行\"),n(\"strong\",[e._v(\"宏1\")]),e._v(\"中的同步代码\"),n(\"code\",[e._v(\"start\")])]),e._v(\" \"),n(\"li\",[e._v(\"第一次宏任务(\"),n(\"strong\",[e._v(\"宏1\")]),e._v(\")执行完毕，检查第一次的微任务队列(\"),n(\"strong\",[e._v(\"微1\")]),e._v(\")，发现有一个\"),n(\"code\",[e._v(\"promise.then\")]),e._v(\"这个微任务需要执行\")]),e._v(\" \"),n(\"li\",[e._v(\"执行打印出\"),n(\"strong\",[e._v(\"微1\")]),e._v(\"中同步代码\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"，然后发现定时器\"),n(\"code\",[e._v(\"timer2\")]),e._v(\"，将它加入\"),n(\"strong\",[e._v(\"宏2\")]),e._v(\"的后面，标记为\"),n(\"strong\",[e._v(\"宏3\")])]),e._v(\" \"),n(\"li\",[e._v(\"第一次微任务队列(\"),n(\"strong\",[e._v(\"微1\")]),e._v(\")执行完毕，执行第二次宏任务(\"),n(\"strong\",[e._v(\"宏2\")]),e._v(\")，首先执行同步代码\"),n(\"code\",[e._v(\"timer1\")])]),e._v(\" \"),n(\"li\",[e._v(\"然后遇到了\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"这个微任务，将它加入此次循环的微任务队列，标记为\"),n(\"strong\",[e._v(\"微2\")])]),e._v(\" \"),n(\"li\",[n(\"strong\",[e._v(\"宏2\")]),e._v(\"中没有同步代码可执行了，查找本次循环的微任务队列(\"),n(\"strong\",[e._v(\"微2\")]),e._v(\")，发现了\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"，执行它\")]),e._v(\" \"),n(\"li\",[e._v(\"第二轮执行完毕，执行\"),n(\"strong\",[e._v(\"宏3\")]),e._v(\"，打印出\"),n(\"code\",[e._v(\"timer2\")])])]),e._v(\" \"),n(\"p\",[e._v(\"所以结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'start'\\n'promise1'\\n'timer1'\\n'promise2'\\n'timer2'\\n\")])])]),n(\"p\",[e._v(\"如果感觉有点绕的话，可以看下面这张图，就一目了然了。\\n\"),n(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2021/webp/12821255/1626357897764-38091db6-91bb-4529-9680-180cc0281583.webp#align=left&display=inline&height=665&margin=%5Bobject%20Object%5D&originHeight=665&originWidth=1280&size=0&status=done&style=none&width=1280\",alt:\"\"}})]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_2-4-题目四\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-4-题目四\"}},[e._v(\"#\")]),e._v(\" 2.4 题目四\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const promise1 = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve('success')\\n  }, 1000)\\n})\\nconst promise2 = promise1.then(() => {\\n  throw new Error('error!!!')\\n})\\nconsole.log('promise1', promise1)\\nconsole.log('promise2', promise2)\\nsetTimeout(() => {\\n  console.log('promise1', promise1)\\n  console.log('promise2', promise2)\\n}, 2000)\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"从上至下，先执行第一个\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"中的函数，碰到\"),n(\"code\",[e._v(\"setTimeout\")]),e._v(\"将它加入下一个宏任务列表\")]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"，碰到\"),n(\"code\",[e._v(\"promise1.then\")]),e._v(\"这个微任务，但其状态还是为\"),n(\"code\",[e._v(\"pending\")]),e._v(\"，这里理解为先不执行\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"promise2\")]),e._v(\"是一个新的状态为\"),n(\"code\",[e._v(\"pending\")]),e._v(\"的\"),n(\"code\",[e._v(\"Promise\")])]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"console.log('promise1')\")]),e._v(\"，且打印出的\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"的状态为\"),n(\"code\",[e._v(\"pending\")])]),e._v(\" \"),n(\"li\",[e._v(\"执行同步代码\"),n(\"code\",[e._v(\"console.log('promise2')\")]),e._v(\"，且打印出的\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"的状态为\"),n(\"code\",[e._v(\"pending\")])]),e._v(\" \"),n(\"li\",[e._v(\"碰到第二个定时器，将其放入下一个宏任务列表\")]),e._v(\" \"),n(\"li\",[e._v(\"第一轮宏任务执行结束，并且没有微任务需要执行，因此执行第二轮宏任务\")]),e._v(\" \"),n(\"li\",[e._v(\"先执行第一个定时器里的内容，将\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"的状态改为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"且保存结果并将之前的\"),n(\"code\",[e._v(\"promise1.then\")]),e._v(\"推入微任务队列\")]),e._v(\" \"),n(\"li\",[e._v(\"该定时器中没有其它的同步代码可执行，因此执行本轮的微任务队列，也就是\"),n(\"code\",[e._v(\"promise1.then\")]),e._v(\"，它抛出了一个错误，且将\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"的状态设置为了\"),n(\"code\",[e._v(\"rejected\")])]),e._v(\" \"),n(\"li\",[e._v(\"第一个定时器执行完毕，开始执行第二个定时器中的内容\")]),e._v(\" \"),n(\"li\",[e._v(\"打印出\"),n(\"code\",[e._v(\"'promise1'\")]),e._v(\"，且此时\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"的状态为\"),n(\"code\",[e._v(\"resolved\")])]),e._v(\" \"),n(\"li\",[e._v(\"打印出\"),n(\"code\",[e._v(\"'promise2'\")]),e._v(\"，且此时\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"的状态为\"),n(\"code\",[e._v(\"rejected\")])])]),e._v(\" \"),n(\"p\",[e._v(\"完整的结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'promise1' Promise{<pending>}\\n'promise2' Promise{<pending>}\\ntest5.html:102 Uncaught (in promise) Error: error!!! at test.html:102\\n'promise1' Promise{<resolved>: \\\"success\\\"}\\n'promise2' Promise{<rejected>: Error: error!!!}\\n\")])])]),n(\"h4\",{attrs:{id:\"_2-5-题目五\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-5-题目五\"}},[e._v(\"#\")]),e._v(\" 2.5 题目五\")]),e._v(\" \"),n(\"p\",[e._v(\"如果你上面这道题搞懂了之后，我们就可以来做做这道了，你应该能很快就给出答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const promise1 = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve(\"success\");\\n    console.log(\"timer1\");\\n  }, 1000);\\n  console.log(\"promise1里的内容\");\\n});\\nconst promise2 = promise1.then(() => {\\n  throw new Error(\"error!!!\");\\n});\\nconsole.log(\"promise1\", promise1);\\nconsole.log(\"promise2\", promise2);\\nsetTimeout(() => {\\n  console.log(\"timer2\");\\n  console.log(\"promise1\", promise1);\\n  console.log(\"promise2\", promise2);\\n}, 2000);\\n')])])]),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'promise1里的内容'\\n'promise1' Promise{<pending>}\\n'promise2' Promise{<pending>}\\n'timer1'\\ntest5.html:102 Uncaught (in promise) Error: error!!! at test.html:102\\n'timer2'\\n'promise1' Promise{<resolved>: \\\"success\\\"}\\n'promise2' Promise{<rejected>: Error: error!!!}\\n\")])])]),n(\"h3\",{attrs:{id:\"_3-promise中的then、catch、finally\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-promise中的then、catch、finally\"}},[e._v(\"#\")]),e._v(\" 3. Promise中的then、catch、finally\")]),e._v(\" \"),n(\"p\",[e._v(\"额，可能你看到下面👇这么多的\"),n(\"code\",[e._v(\"1，2，3\")]),e._v(\"脾气就上来了，不是说好了本篇文章没什么屁话嘛，怎么还是这么多一二三四。\\n😂，你要理解我的用心良苦啊，我这是帮你把知识点都列举出来，做个总结而已。当然，你也可以先不看，先去做后面的题，然后再回过头来看这些，你就觉得这些点都好好懂啊，甚至都不需要记。\\n\"),n(\"strong\",[e._v(\"总结：\")])]),e._v(\" \"),n(\"ol\",[n(\"li\",[n(\"code\",[e._v(\"Promise\")]),e._v(\"的状态一经改变就不能再改变。(见3.1)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".then\")]),e._v(\"和\"),n(\"code\",[e._v(\".catch\")]),e._v(\"都会返回一个新的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"。(上面的👆1.4证明了)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"catch\")]),e._v(\"不管被连接到哪里，都能捕获上层未捕捉过的错误。(见3.2)\")]),e._v(\" \"),n(\"li\",[e._v(\"在\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"中，返回任意一个非 \"),n(\"code\",[e._v(\"promise\")]),e._v(\" 的值都会被包裹成 \"),n(\"code\",[e._v(\"promise\")]),e._v(\" 对象，例如\"),n(\"code\",[e._v(\"return 2\")]),e._v(\"会被包装为\"),n(\"code\",[e._v(\"return Promise.resolve(2)\")]),e._v(\"。\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"Promise\")]),e._v(\" 的 \"),n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 可以被调用多次, 但如果\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"内部的状态一经改变，并且有了一个值，那么后续每次调用\"),n(\"code\",[e._v(\".then\")]),e._v(\"或者\"),n(\"code\",[e._v(\".catch\")]),e._v(\"的时候都会直接拿到该值。(见3.5)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 中 \"),n(\"code\",[e._v(\"return\")]),e._v(\" 一个 \"),n(\"code\",[e._v(\"error\")]),e._v(\" 对象并不会抛出错误，所以不会被后续的 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 捕获。(见3.6)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".then\")]),e._v(\" 或 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 返回的值不能是 promise 本身，否则会造成死循环。(见3.7)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 的参数期望是函数，传入非函数则会发生值透传。(见3.8)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".then\")]),e._v(\"方法是能接收两个参数的，第一个是处理成功的函数，第二个是处理失败的函数，再某些时候你可以认为\"),n(\"code\",[e._v(\"catch\")]),e._v(\"是\"),n(\"code\",[e._v(\".then\")]),e._v(\"第二个参数的简便写法。(见3.9)\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".finally\")]),e._v(\"方法也是返回一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"，他在\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"结束的时候，无论结果为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"还是\"),n(\"code\",[e._v(\"rejected\")]),e._v(\"，都会执行里面的回调函数。\")])]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_3-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-题目一\"}},[e._v(\"#\")]),e._v(\" 3.1 题目一\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const promise = new Promise((resolve, reject) => {\\n  resolve(\"success1\");\\n  reject(\"error\");\\n  resolve(\"success2\");\\n});\\npromise\\n.then(res => {\\n    console.log(\"then: \", res);\\n  }).catch(err => {\\n    console.log(\"catch: \", err);\\n  })\\n')])])]),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('\"then: success1\"\\n')])])]),n(\"p\",[e._v(\"构造函数中的 \"),n(\"code\",[e._v(\"resolve\")]),e._v(\" 或 \"),n(\"code\",[e._v(\"reject\")]),e._v(\" 只有第一次执行有效，多次调用没有任何作用 。验证了第一个结论，\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的状态一经改变就不能再改变。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_3-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-题目二\"}},[e._v(\"#\")]),e._v(\" 3.2 题目二\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const promise = new Promise((resolve, reject) => {\\n  reject(\"error\");\\n  resolve(\"success2\");\\n});\\npromise\\n.then(res => {\\n    console.log(\"then1: \", res);\\n  }).then(res => {\\n    console.log(\"then2: \", res);\\n  }).catch(err => {\\n    console.log(\"catch: \", err);\\n  }).then(res => {\\n    console.log(\"then3: \", res);\\n  })\\n')])])]),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('\"catch: \" \"error\"\\n\"then3: \" undefined\\n')])])]),n(\"p\",[e._v(\"验证了第三个结论，\"),n(\"code\",[e._v(\"catch\")]),e._v(\"不管被连接到哪里，都能捕获上层未捕捉过的错误。\\n至于\"),n(\"code\",[e._v(\"then3\")]),e._v(\"也会被执行，那是因为\"),n(\"code\",[e._v(\"catch()\")]),e._v(\"也会返回一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"，且由于这个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"没有返回值，所以打印出来的是\"),n(\"code\",[e._v(\"undefined\")]),e._v(\"。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_3-3-题目三\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-题目三\"}},[e._v(\"#\")]),e._v(\" 3.3 题目三\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve(1)\\n  .then(res => {\\n    console.log(res);\\n    return 2;\\n  })\\n  .catch(err => {\\n    return 3;\\n  })\\n  .then(res => {\\n    console.log(res);\\n  });\\n\")])])]),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n2\\n\")])])]),n(\"p\",[n(\"code\",[e._v(\"Promise\")]),e._v(\"可以链式调用，不过\"),n(\"code\",[e._v(\"promise\")]),e._v(\" 每次调用 \"),n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 都会返回一个新的 \"),n(\"code\",[e._v(\"promise\")]),e._v(\"，从而实现了链式调用, 它并不像一般我们任务的链式调用一样\"),n(\"code\",[e._v(\"return this\")]),e._v(\"。\\n上面的输出结果之所以依次打印出\"),n(\"code\",[e._v(\"1\")]),e._v(\"和\"),n(\"code\",[e._v(\"2\")]),e._v(\"，那是因为\"),n(\"code\",[e._v(\"resolve(1)\")]),e._v(\"之后走的是第一个\"),n(\"code\",[e._v(\"then\")]),e._v(\"方法，并没有走\"),n(\"code\",[e._v(\"catch\")]),e._v(\"里，所以第二个\"),n(\"code\",[e._v(\"then\")]),e._v(\"中的\"),n(\"code\",[e._v(\"res\")]),e._v(\"得到的实际上是第一个\"),n(\"code\",[e._v(\"then\")]),e._v(\"的返回值。\\n且\"),n(\"code\",[e._v(\"return 2\")]),e._v(\"会被包装成\"),n(\"code\",[e._v(\"resolve(2)\")]),e._v(\"。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_3-4-题目四\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-4-题目四\"}},[e._v(\"#\")]),e._v(\" 3.4 题目四\")]),e._v(\" \"),n(\"p\",[e._v(\"如果把\"),n(\"code\",[e._v(\"3.3\")]),e._v(\"中的\"),n(\"code\",[e._v(\"Promise.resolve(1)\")]),e._v(\"改为\"),n(\"code\",[e._v(\"Promise.reject(1)\")]),e._v(\"又会怎么样呢？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.reject(1)\\n  .then(res => {\\n    console.log(res);\\n    return 2;\\n  })\\n  .catch(err => {\\n    console.log(err);\\n    return 3\\n  })\\n  .then(res => {\\n    console.log(res);\\n  });\\n\")])])]),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n3\\n\")])])]),n(\"p\",[e._v(\"结果打印的当然是 \"),n(\"code\",[e._v(\"1 和 3\")]),e._v(\"啦，因为\"),n(\"code\",[e._v(\"reject(1)\")]),e._v(\"此时走的就是\"),n(\"code\",[e._v(\"catch\")]),e._v(\"，且第二个\"),n(\"code\",[e._v(\"then\")]),e._v(\"中的\"),n(\"code\",[e._v(\"res\")]),e._v(\"得到的就是\"),n(\"code\",[e._v(\"catch\")]),e._v(\"中的返回值。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_3-5-题目五\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-5-题目五\"}},[e._v(\"#\")]),e._v(\" 3.5 题目五\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const promise = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    console.log('timer')\\n    resolve('success')\\n  }, 1000)\\n})\\nconst start = Date.now();\\npromise.then(res => {\\n  console.log(res, Date.now() - start)\\n})\\npromise.then(res => {\\n  console.log(res, Date.now() - start)\\n})\\n\")])])]),n(\"p\",[e._v(\"执行结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'timer'\\n'success' 1001\\n'success' 1002\\n\")])])]),n(\"p\",[e._v(\"当然，如果你足够快的话，也可能两个都是\"),n(\"code\",[e._v(\"1001\")]),e._v(\"。\\n\"),n(\"code\",[e._v(\"Promise\")]),e._v(\" 的 \"),n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 可以被调用多次，但这里 \"),n(\"code\",[e._v(\"Promise\")]),e._v(\" 构造函数只执行一次。或者说 \"),n(\"code\",[e._v(\"promise\")]),e._v(\" 内部状态一经改变，并且有了一个值，那么后续每次调用 \"),n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 都会直接拿到该值。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_3-6-题目六\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-6-题目六\"}},[e._v(\"#\")]),e._v(\" 3.6 题目六\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('Promise.resolve().then(() => {\\n  return new Error(\\'error!!!\\')\\n}).then(res => {\\n  console.log(\"then: \", res)\\n}).catch(err => {\\n  console.log(\"catch: \", err)\\n})\\n')])])]),n(\"p\",[e._v(\"猜猜这里的结果输出的是什么 🤔️ ？\\n你可能想到的是进入\"),n(\"code\",[e._v(\".catch\")]),e._v(\"然后被捕获了错误。\\n结果并不是这样的，它走的是\"),n(\"code\",[e._v(\".then\")]),e._v(\"里面：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('\"then: \" \"Error: error!!!\"\\n')])])]),n(\"p\",[e._v(\"这也验证了第4点和第6点，返回任意一个非 \"),n(\"code\",[e._v(\"promise\")]),e._v(\" 的值都会被包裹成 \"),n(\"code\",[e._v(\"promise\")]),e._v(\" 对象，因此这里的\"),n(\"code\",[e._v(\"return new Error('error!!!')\")]),e._v(\"也被包裹成了\"),n(\"code\",[e._v(\"return Promise.resolve(new Error('error!!!'))\")]),e._v(\"。\\n当然如果你抛出一个错误的话，可以用下面👇两的任意一种：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"return Promise.reject(new Error('error!!!'));\\n// or\\nthrow new Error('error!!!')\\n\")])])]),n(\"h4\",{attrs:{id:\"_3-7-题目七\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-7-题目七\"}},[e._v(\"#\")]),e._v(\" 3.7 题目七\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const promise = Promise.resolve().then(() => {\\n  return promise;\\n})\\npromise.catch(console.err)\\n\")])])]),n(\"p\",[n(\"code\",[e._v(\".then\")]),e._v(\" 或 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 返回的值不能是 promise 本身，否则会造成死循环。\\n因此结果会报错：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Uncaught (in promise) TypeError: Chaining cycle detected for promise #<Promise>\\n\")])])]),n(\"h4\",{attrs:{id:\"_3-8-题目八\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-8-题目八\"}},[e._v(\"#\")]),e._v(\" 3.8 题目八\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve(1)\\n  .then(2)\\n  .then(Promise.resolve(3))\\n  .then(console.log)\\n\")])])]),n(\"p\",[e._v(\"这道题看着好像很简单，又感觉很复杂的样子，怎么这么多个\"),n(\"code\",[e._v(\".then\")]),e._v(\"啊... 😅\")]),e._v(\" \"),n(\"p\",[e._v(\"其实你只要记住\"),n(\"strong\",[e._v(\"原则8\")]),e._v(\"：\"),n(\"code\",[e._v(\".then\")]),e._v(\" 或者 \"),n(\"code\",[e._v(\".catch\")]),e._v(\" 的参数期望是函数，传入非函数则会发生值透传。\\n第一个\"),n(\"code\",[e._v(\"then\")]),e._v(\"和第二个\"),n(\"code\",[e._v(\"then\")]),e._v(\"中传入的都不是函数，一个是数字类型，一个是对象类型，因此发生了透传，将\"),n(\"code\",[e._v(\"resolve(1)\")]),e._v(\" 的值直接传到最后一个\"),n(\"code\",[e._v(\"then\")]),e._v(\"里。\\n所以输出结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n\")])])]),n(\"h4\",{attrs:{id:\"_3-9-题目九\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-9-题目九\"}},[e._v(\"#\")]),e._v(\" 3.9 题目九\")]),e._v(\" \"),n(\"p\",[e._v(\"下面来介绍一下\"),n(\"code\",[e._v(\".then\")]),e._v(\"函数中的两个参数。\\n第一个参数是用来处理\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"成功的函数，第二个则是处理失败的函数。\\n也就是说\"),n(\"code\",[e._v(\"Promise.resolve('1')\")]),e._v(\"的值会进入成功的函数，\"),n(\"code\",[e._v(\"Promise.reject('2')\")]),e._v(\"的值会进入失败的函数。\\n让我们来看看这个例子🌰：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.reject('err!!!')\\n  .then((res) => {\\n    console.log('success', res)\\n  }, (err) => {\\n    console.log('error', err)\\n  }).catch(err => {\\n    console.log('catch', err)\\n  })\\n\")])])]),n(\"p\",[e._v(\"这里的执行结果是：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'error' 'error!!!'\\n\")])])]),n(\"p\",[e._v(\"它进入的是\"),n(\"code\",[e._v(\"then()\")]),e._v(\"中的第二个参数里面，而如果把第二个参数去掉，就进入了\"),n(\"code\",[e._v(\"catch()\")]),e._v(\"中：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.reject('error!!!')\\n  .then((res) => {\\n    console.log('success', res)\\n  }).catch(err => {\\n    console.log('catch', err)\\n  })\\n\")])])]),n(\"p\",[e._v(\"执行结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'catch' 'error!!!'\\n\")])])]),n(\"p\",[e._v(\"但是有一个问题，如果是这个案例呢？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve()\\n  .then(function success (res) {\\n    throw new Error('error!!!')\\n  }, function fail1 (err) {\\n    console.log('fail1', err)\\n  }).catch(function fail2 (err) {\\n    console.log('fail2', err)\\n  })\\n\")])])]),n(\"p\",[e._v(\"由于\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"调用的是\"),n(\"code\",[e._v(\"resolve()\")]),e._v(\"，因此\"),n(\"code\",[e._v(\".then()\")]),e._v(\"执行的应该是\"),n(\"code\",[e._v(\"success()\")]),e._v(\"函数，可是\"),n(\"code\",[e._v(\"success()\")]),e._v(\"函数抛出的是一个错误，它会被后面的\"),n(\"code\",[e._v(\"catch()\")]),e._v(\"给捕获到，而不是被\"),n(\"code\",[e._v(\"fail1\")]),e._v(\"函数捕获。\\n因此执行结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"fail2 Error: error!!!\\n\\t\\t\\tat success\\n\")])])]),n(\"h4\",{attrs:{id:\"_3-10-题目十\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-10-题目十\"}},[e._v(\"#\")]),e._v(\" 3.10 题目十\")]),e._v(\" \"),n(\"p\",[e._v(\"接着来看看\"),n(\"code\",[e._v(\".finally()\")]),e._v(\"，这个功能一般不太用在面试中，不过如果碰到了你也应该知道该如何处理。\\n其实你只要记住它三个很重要的知识点就可以了：\")]),e._v(\" \"),n(\"ol\",[n(\"li\",[n(\"code\",[e._v(\".finally()\")]),e._v(\"方法不管\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"对象最后的状态如何都会执行\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".finally()\")]),e._v(\"方法的回调函数不接受任何的参数，也就是说你在\"),n(\"code\",[e._v(\".finally()\")]),e._v(\"函数中是没法知道\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"最终的状态是\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"还是\"),n(\"code\",[e._v(\"rejected\")]),e._v(\"的\")]),e._v(\" \"),n(\"li\",[e._v(\"它最终返回的默认会是一个\"),n(\"strong\",[e._v(\"上一次的Promise对象值\")]),e._v(\"，不过如果抛出的是一个异常则返回异常的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"对象。\")])]),e._v(\" \"),n(\"p\",[e._v(\"来看看这个简单的例子🌰：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve('1')\\n  .then(res => {\\n    console.log(res)\\n  })\\n  .finally(() => {\\n    console.log('finally')\\n  })\\nPromise.resolve('2')\\n  .finally(() => {\\n    console.log('finally2')\\n  \\treturn '我是finally2返回的值'\\n  })\\n  .then(res => {\\n    console.log('finally2后面的then函数', res)\\n  })\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"这两个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的\"),n(\"code\",[e._v(\".finally\")]),e._v(\"都会执行，且就算\"),n(\"code\",[e._v(\"finally2\")]),e._v(\"返回了新的值，它后面的\"),n(\"code\",[e._v(\"then()\")]),e._v(\"函数接收到的结果却还是\"),n(\"code\",[e._v(\"'2'\")]),e._v(\"，因此打印结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'1'\\n'finally2'\\n'finally'\\n'finally2后面的then函数' '2'\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"至于为什么\"),n(\"code\",[e._v(\"finally2\")]),e._v(\"的打印要在\"),n(\"code\",[e._v(\"finally\")]),e._v(\"前面，请看下一个例子中的解析。\\n不过在此之前让我们再来确认一下，\"),n(\"code\",[e._v(\"finally\")]),e._v(\"中要是抛出的是一个异常是怎样的：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve('1')\\n  .finally(() => {\\n    console.log('finally1')\\n    throw new Error('我是finally中抛出的异常')\\n  })\\n  .then(res => {\\n    console.log('finally后面的then函数', res)\\n  })\\n  .catch(err => {\\n    console.log('捕获错误', err)\\n  })\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"执行结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'finally1'\\n'捕获错误' Error: 我是finally中抛出的异常\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"但是如果改为\"),n(\"code\",[e._v(\"return new Error('我是finally中抛出的异常')\")]),e._v(\"，打印出来的就是\"),n(\"code\",[e._v(\"'finally后面的then函数 1'\")]),e._v(\"\\nOK，👌，让我们来看一个比较难的例子🌰：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function promise1 () {\\n  let p = new Promise((resolve) => {\\n    console.log('promise1');\\n    resolve('1')\\n  })\\n  return p;\\n}\\nfunction promise2 () {\\n  return new Promise((resolve, reject) => {\\n    reject('error')\\n  })\\n}\\npromise1()\\n  .then(res => console.log(res))\\n  .catch(err => console.log(err))\\n  .finally(() => console.log('finally1'))\\npromise2()\\n  .then(res => console.log(res))\\n  .catch(err => console.log(err))\\n  .finally(() => console.log('finally2'))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"执行过程：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"首先定义了两个函数\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"和\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"，先不管接着往下看。\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"promise1\")]),e._v(\"函数先被调用了，然后执行里面\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"的同步代码打印出\"),n(\"code\",[e._v(\"promise1\")])]),e._v(\" \"),n(\"li\",[e._v(\"之后遇到了\"),n(\"code\",[e._v(\"resolve(1)\")]),e._v(\"，将\"),n(\"code\",[e._v(\"p\")]),e._v(\"的状态改为了\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"并将结果保存下来。\")]),e._v(\" \"),n(\"li\",[e._v(\"此时\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"内的函数内容已经执行完了，跳出该函数\")]),e._v(\" \"),n(\"li\",[e._v(\"碰到了\"),n(\"code\",[e._v(\"promise1().then()\")]),e._v(\"，由于\"),n(\"code\",[e._v(\"promise1\")]),e._v(\"的状态已经发生了改变且为\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"因此将\"),n(\"code\",[e._v(\"promise1().then()\")]),e._v(\"这条微任务加入本轮的微任务列表(\"),n(\"strong\",[e._v(\"这是第一个微任务\")]),e._v(\")\")]),e._v(\" \"),n(\"li\",[e._v(\"这时候要注意了，代码并不会接着往链式调用的下面走，也就是不会先将\"),n(\"code\",[e._v(\".finally\")]),e._v(\"加入微任务列表，那是因为\"),n(\"code\",[e._v(\".then\")]),e._v(\"本身就是一个微任务，它链式后面的内容必须得等当前这个微任务执行完才会执行，因此这里我们先不管\"),n(\"code\",[e._v(\".finally()\")])]),e._v(\" \"),n(\"li\",[e._v(\"再往下走碰到了\"),n(\"code\",[e._v(\"promise2()\")]),e._v(\"函数，其中返回的\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"中并没有同步代码需要执行，所以执行\"),n(\"code\",[e._v(\"reject('error')\")]),e._v(\"的时候将\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"函数中的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的状态变为了\"),n(\"code\",[e._v(\"rejected\")])]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"函数，遇到了\"),n(\"code\",[e._v(\"promise2().catch()\")]),e._v(\"，将其加入当前的微任务队列(\"),n(\"strong\",[e._v(\"这是第二个微任务\")]),e._v(\")，且链式调用后面的内容得等该任务执行完后才执行，和\"),n(\"code\",[e._v(\".then()\")]),e._v(\"一样。\")]),e._v(\" \"),n(\"li\",[e._v(\"OK， 本轮的宏任务全部执行完了，来看看微任务列表，存在\"),n(\"code\",[e._v(\"promise1().then()\")]),e._v(\"，执行它，打印出\"),n(\"code\",[e._v(\"1\")]),e._v(\"，然后遇到了\"),n(\"code\",[e._v(\".finally()\")]),e._v(\"这个微任务将它加入微任务列表(\"),n(\"strong\",[e._v(\"这是第三个微任务\")]),e._v(\")等待执行\")]),e._v(\" \"),n(\"li\",[e._v(\"再执行\"),n(\"code\",[e._v(\"promise2().catch()\")]),e._v(\"打印出\"),n(\"code\",[e._v(\"error\")]),e._v(\"，执行完后将\"),n(\"code\",[e._v(\"finally2\")]),e._v(\"加入微任务加入微任务列表(\"),n(\"strong\",[e._v(\"这是第四个微任务\")]),e._v(\")\")]),e._v(\" \"),n(\"li\",[e._v(\"OK， 本轮又全部执行完了，但是微任务列表还有两个新的微任务没有执行完，因此依次执行\"),n(\"code\",[e._v(\"finally1\")]),e._v(\"和\"),n(\"code\",[e._v(\"finally2\")]),e._v(\"。\")])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'promise1'\\n'1'\\n'error'\\n'finally1'\\n'finally2'\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"在这道题中其实能拓展的东西挺多的，之前没有提到，那就是你可以理解为\"),n(\"strong\",[e._v(\"链式调用\")]),e._v(\"后面的内容需要等前一个调用执行完才会执行。\\n就像是这里的\"),n(\"code\",[e._v(\"finally()\")]),e._v(\"会等\"),n(\"code\",[e._v(\"promise1().then()\")]),e._v(\"执行完才会将\"),n(\"code\",[e._v(\"finally()\")]),e._v(\"加入微任务队列，其实如果这道题中你把\"),n(\"code\",[e._v(\"finally()\")]),e._v(\"换成是\"),n(\"code\",[e._v(\"then()\")]),e._v(\"也是这样的:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function promise1 () {\\n  let p = new Promise((resolve) => {\\n    console.log('promise1');\\n    resolve('1')\\n  })\\n  return p;\\n}\\nfunction promise2 () {\\n  return new Promise((resolve, reject) => {\\n    reject('error')\\n  })\\n}\\npromise1()\\n  .then(res => console.log(res))\\n  .catch(err => console.log(err))\\n  .then(() => console.log('finally1'))\\npromise2()\\n  .then(res => console.log(res))\\n  .catch(err => console.log(err))\\n  .then(() => console.log('finally2'))\\n复制代码\\n\")])])]),n(\"h3\",{attrs:{id:\"_4-promise中的all和race\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-promise中的all和race\"}},[e._v(\"#\")]),e._v(\" 4. Promise中的all和race\")]),e._v(\" \"),n(\"p\",[e._v(\"在做下面👇的题目之前，让我们先来了解一下\"),n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"和\"),n(\"code\",[e._v(\"Promise.race()\")]),e._v(\"的用法。\\n通俗来说，\"),n(\"code\",[e._v(\".all()\")]),e._v(\"的作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。\\n\"),n(\"code\",[e._v(\".race()\")]),e._v(\"的作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。\\n来看看题目一。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_4-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-1-题目一\"}},[e._v(\"#\")]),e._v(\" 4.1 题目一\")]),e._v(\" \"),n(\"p\",[e._v(\"我们知道如果直接在脚本文件中定义一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"，它构造函数的第一个参数是会立即执行的，就像这样：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const p1 = new Promise(r => console.log('立即打印'))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"控制台中会立即打印出 “立即打印”。\\n因此为了控制它什么时候执行，我们可以用一个函数包裹着它，在需要它执行的时候，调用这个函数就可以了：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function runP1 () {\\n    const p1 = new Promise(r => console.log('立即打印'))\\n    return p1\\n}\\nrunP1() // 调用此函数时才执行\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"OK 👌， 让我们回归正题。\\n现在来构建这么一个函数：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function runAsync (x) {\\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\\n    return p\\n}\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"该函数传入一个值\"),n(\"code\",[e._v(\"x\")]),e._v(\"，然后间隔一秒后打印出这个\"),n(\"code\",[e._v(\"x\")]),e._v(\"。\\n如果我用\"),n(\"code\",[e._v(\".all()\")]),e._v(\"来执行它会怎样呢？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function runAsync (x) {\\n    const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\\n    return p\\n}\\nPromise.all([runAsync(1), runAsync(2), runAsync(3)])\\n  .then(res => console.log(res))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"先来想想此段代码在浏览器中会如何执行？\\n没错，当你打开页面的时候，在间隔一秒后，控制台会同时打印出\"),n(\"code\",[e._v(\"1, 2, 3\")]),e._v(\"，还有一个数组\"),n(\"code\",[e._v(\"[1, 2, 3]\")]),e._v(\"。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n2\\n3\\n[1, 2, 3]\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"所以你现在能理解这句话的意思了吗：\"),n(\"strong\",[e._v(\"有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据。\")]),e._v(\" \"),n(\"code\",[e._v(\".all()\")]),e._v(\"后面的\"),n(\"code\",[e._v(\".then()\")]),e._v(\"里的回调函数接收的就是所有异步操作的结果。\\n而且这个结果中数组的顺序和\"),n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"接收到的数组顺序一致！！！\")]),e._v(\" \"),n(\"blockquote\",[n(\"p\",[e._v(\"有一个场景是很适合用这个的，一些游戏类的素材比较多的应用，打开网页时，预先加载需要用到的各种资源如图片、flash以及各种静态文件。所有的都加载完后，我们再进行页面的初始化。\")])]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_4-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-2-题目二\"}},[e._v(\"#\")]),e._v(\" 4.2 题目二\")]),e._v(\" \"),n(\"p\",[e._v(\"我新增了一个\"),n(\"code\",[e._v(\"runReject\")]),e._v(\"函数，它用来在\"),n(\"code\",[e._v(\"1000 * x\")]),e._v(\"秒后\"),n(\"code\",[e._v(\"reject\")]),e._v(\"一个错误。\\n同时\"),n(\"code\",[e._v(\".catch()\")]),e._v(\"函数能够捕获到\"),n(\"code\",[e._v(\".all()\")]),e._v(\"里最先的那个异常，并且只执行一次。\\n想想这道题会怎样执行呢 🤔️？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function runAsync (x) {\\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\\n  return p\\n}\\nfunction runReject (x) {\\n  const p = new Promise((res, rej) => setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x))\\n  return p\\n}\\nPromise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\\n  .then(res => console.log(res))\\n  .catch(err => console.log(err))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"不卖关子了 😁，让我来公布答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"// 1s后输出\\n1\\n3\\n// 2s后输出\\n2\\nError: 2\\n// 4s后输出\\n4\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"没错，就像我之前说的，\"),n(\"code\",[e._v(\".catch\")]),e._v(\"是会捕获最先的那个异常，在这道题目中最先的异常就是\"),n(\"code\",[e._v(\"runReject(2)\")]),e._v(\"的结果。\\n另外，如果一组异步操作中有一个异常都不会进入\"),n(\"code\",[e._v(\".then()\")]),e._v(\"的第一个回调函数参数中。\\n注意，为什么不说是不进入\"),n(\"code\",[e._v(\".then()\")]),e._v(\"中呢 🤔️？\\n哈哈，大家别忘了\"),n(\"code\",[e._v(\".then()\")]),e._v(\"方法的第二个参数也是可以捕获错误的：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.all([runAsync(1), runReject(4), runAsync(3), runReject(2)])\\n  .then(res => console.log(res), \\n  err => console.log(err))\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_4-3-题目三\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-3-题目三\"}},[e._v(\"#\")]),e._v(\" 4.3 题目三\")]),e._v(\" \"),n(\"p\",[e._v(\"接下来让我们看看另一个有趣的方法\"),n(\"code\",[e._v(\".race\")]),e._v(\"。\\n让我看看你们的英语水平如何？\\n快！一秒钟告诉我\"),n(\"code\",[e._v(\"race\")]),e._v(\"是什么意思？\")]),e._v(\" \"),n(\"p\",[e._v(\"好吧...你们果然很强...\\n\"),n(\"code\",[e._v(\"race\")]),e._v(\"，比赛，赛跑的意思。\\n所以使用\"),n(\"code\",[e._v(\".race()\")]),e._v(\"方法，它只会获取最先执行完成的那个结果，其它的异步任务虽然也会继续进行下去，不过\"),n(\"code\",[e._v(\"race\")]),e._v(\"已经不管那些任务的结果了。\\n来，改造一下\"),n(\"code\",[e._v(\"4.1\")]),e._v(\"这道题：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function runAsync (x) {\\n  const p = new Promise(r => setTimeout(() => r(x, console.log(x)), 1000))\\n  return p\\n}\\nPromise.race([runAsync(1), runAsync(2), runAsync(3)])\\n  .then(res => console.log('result: ', res))\\n  .catch(err => console.log(err))\\n\")])])]),n(\"p\",[e._v(\"执行结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n'result: ' 1\\n2\\n3\\n\")])])]),n(\"blockquote\",[n(\"p\",[e._v(\"这个race有什么用呢？使用场景还是很多的，比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作\")])]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_4-4-题目四\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-4-题目四\"}},[e._v(\"#\")]),e._v(\" 4.4 题目四\")]),e._v(\" \"),n(\"p\",[e._v(\"改造一下题目\"),n(\"code\",[e._v(\"4.2\")]),e._v(\"：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('function runAsync(x) {\\n  const p = new Promise(r =>\\n    setTimeout(() => r(x, console.log(x)), 1000)\\n  );\\n  return p;\\n}\\nfunction runReject(x) {\\n  const p = new Promise((res, rej) =>\\n    setTimeout(() => rej(`Error: ${x}`, console.log(x)), 1000 * x)\\n  );\\n  return p;\\n}\\nPromise.race([runReject(0), runAsync(1), runAsync(2), runAsync(3)])\\n  .then(res => console.log(\"result: \", res))\\n  .catch(err => console.log(err));\\n')])])]),n(\"p\",[e._v(\"遇到错误的话，也是一样的，在这道题中，\"),n(\"code\",[e._v(\"runReject(0)\")]),e._v(\"最先执行完，所以进入了\"),n(\"code\",[e._v(\"catch()\")]),e._v(\"中：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"0\\n'Error: 0'\\n1\\n2\\n3\\n\")])])]),n(\"h4\",{attrs:{id:\"总结\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[e._v(\"#\")]),e._v(\" 总结\")]),e._v(\" \"),n(\"p\",[e._v(\"好的，让我们来总结一下\"),n(\"code\",[e._v(\".then()\")]),e._v(\"和\"),n(\"code\",[e._v(\".race()\")]),e._v(\"吧，😄\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"的作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".race()\")]),e._v(\"的作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"Promise.all().then()\")]),e._v(\"结果中数组的顺序和\"),n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"接收到的数组顺序一致。\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"all和race\")]),e._v(\"传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被\"),n(\"code\",[e._v(\"then\")]),e._v(\"的第二个参数或者后面的\"),n(\"code\",[e._v(\"catch\")]),e._v(\"捕获；但并不会影响数组中其它的异步任务的执行。\")])]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_5-async-await的几道题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-async-await的几道题\"}},[e._v(\"#\")]),e._v(\" 5. async/await的几道题\")]),e._v(\" \"),n(\"p\",[e._v(\"既然谈到了\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"，那就肯定得再说说\"),n(\"code\",[e._v(\"async/await\")]),e._v(\"，在很多时候\"),n(\"code\",[e._v(\"async\")]),e._v(\"和\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的解法差不多，又有些不一样。不信你来看看题目一。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_5-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-1-题目一\"}},[e._v(\"#\")]),e._v(\" 5.1 题目一\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function async1() {\\n  console.log(\"async1 start\");\\n  await async2();\\n  console.log(\"async1 end\");\\n}\\nasync function async2() {\\n  console.log(\"async2\");\\n}\\nasync1();\\nconsole.log(\\'start\\')\\n')])])]),n(\"p\",[e._v(\"这道基础题输出的是啥？\\n答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'async1 start'\\n'async2'\\n'start'\\n'async1 end'\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"首先一进来是创建了两个函数的，我们先不看函数的创建位置，而是看它的调用位置\")]),e._v(\" \"),n(\"li\",[e._v(\"发现\"),n(\"code\",[e._v(\"async1\")]),e._v(\"函数被调用了，然后去看看调用的内容\")]),e._v(\" \"),n(\"li\",[e._v(\"执行函数中的同步代码\"),n(\"code\",[e._v(\"async1 start\")]),e._v(\"，之后碰到了\"),n(\"code\",[e._v(\"await\")]),e._v(\"，它会阻塞\"),n(\"code\",[e._v(\"async1\")]),e._v(\"后面代码的执行，因此会先去执行\"),n(\"code\",[e._v(\"async2\")]),e._v(\"中的同步代码\"),n(\"code\",[e._v(\"async2\")]),e._v(\"，然后跳出\"),n(\"code\",[e._v(\"async1\")])]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"async1\")]),e._v(\"函数后，执行同步代码\"),n(\"code\",[e._v(\"start\")])]),e._v(\" \"),n(\"li\",[e._v(\"在一轮宏任务全部执行完之后，再来执行刚刚\"),n(\"code\",[e._v(\"await\")]),e._v(\"后面的内容\"),n(\"code\",[e._v(\"async1 end\")]),e._v(\"。\")])]),e._v(\" \"),n(\"p\",[e._v(\"在这里，你可以理解为「紧跟着await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中」。\\n让我们来看看将\"),n(\"code\",[e._v(\"await\")]),e._v(\"转换为\"),n(\"code\",[e._v(\"Promise.then\")]),e._v(\"的伪代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function async1() {\\n  console.log(\"async1 start\");\\n  // 原来代码\\n  // await async2();\\n  // console.log(\"async1 end\");\\n  \\n  // 转换后代码\\n  new Promise(resolve => {\\n    console.log(\"async2\")\\n    resolve()\\n  }).then(res => console.log(\"async1 end\"))\\n}\\nasync function async2() {\\n  console.log(\"async2\");\\n}\\nasync1();\\nconsole.log(\"start\")\\n')])])]),n(\"p\",[e._v(\"转换后的伪代码和前面的执行结果是一样的。(感谢评论区\"),n(\"a\",{attrs:{href:\"https://juejin.im/user/3421335914314061\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Wing93\"),n(\"OutboundLink\")],1),e._v(\"和\"),n(\"a\",{attrs:{href:\"https://juejin.im/user/1926000100012317\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Jexxie\"),n(\"OutboundLink\")],1),e._v(\"小伙伴的指出)\\n另外关于\"),n(\"code\",[e._v(\"await\")]),e._v(\"和\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的区别，如果我们把\"),n(\"code\",[e._v(\"await async2()\")]),e._v(\"换成一个\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"呢？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function async1() {\\n  console.log(\"async1 start\");\\n  new Promise(resolve => {\\n    console.log(\\'promise\\')\\n  })\\n  console.log(\"async1 end\");\\n}\\nasync1();\\nconsole.log(\"start\")\\n复制代码\\n')])])]),n(\"p\",[e._v(\"此时的执行结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'async start'\\n'promise'\\n'async1 end'\\n'start'\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"可以看到\"),n(\"code\",[e._v(\"new Promise()\")]),e._v(\"并不会阻塞后面的同步代码\"),n(\"code\",[e._v(\"async1 end\")]),e._v(\"的执行。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_5-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-2-题目二\"}},[e._v(\"#\")]),e._v(\" 5.2 题目二\")]),e._v(\" \"),n(\"p\",[e._v(\"现在将\"),n(\"code\",[e._v(\"async\")]),e._v(\"结合定时器看看。\\n给题目一中的 \"),n(\"code\",[e._v(\"async2\")]),e._v(\"函数中加上一个定时器：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function async1() {\\n  console.log(\"async1 start\");\\n  await async2();\\n  console.log(\"async1 end\");\\n}\\nasync function async2() {\\n  setTimeout(() => {\\n    console.log(\\'timer\\')\\n  }, 0)\\n  console.log(\"async2\");\\n}\\nasync1();\\nconsole.log(\"start\")\\n复制代码\\n')])])]),n(\"p\",[e._v(\"没错，定时器始终还是最后执行的，它被放到下一条宏任务的延迟队列中。\\n答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'async1 start'\\n'async2'\\n'start'\\n'async1 end'\\n'timer'\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_5-3-题目三\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-3-题目三\"}},[e._v(\"#\")]),e._v(\" 5.3 题目三\")]),e._v(\" \"),n(\"p\",[e._v(\"来吧，小伙伴们，让我们多加几个定时器看看。😁\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function async1() {\\n  console.log(\"async1 start\");\\n  await async2();\\n  console.log(\"async1 end\");\\n  setTimeout(() => {\\n    console.log(\\'timer1\\')\\n  }, 0)\\n}\\nasync function async2() {\\n  setTimeout(() => {\\n    console.log(\\'timer2\\')\\n  }, 0)\\n  console.log(\"async2\");\\n}\\nasync1();\\nsetTimeout(() => {\\n  console.log(\\'timer3\\')\\n}, 0)\\nconsole.log(\"start\")\\n复制代码\\n')])])]),n(\"p\",[e._v(\"思考一下🤔，执行结果会是什么？\\n其实如果你能做到这里了，说明你前面的那些知识点也都掌握了，我就不需要太过详细的步骤分析了。\\n直接公布答案吧：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'async1 start'\\n'async2'\\n'start'\\n'async1 end'\\n'timer2'\\n'timer3'\\n'timer1'\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"定时器谁先执行，你只需要关注谁先被调用的以及延迟时间是多少，这道题中延迟时间都是\"),n(\"code\",[e._v(\"0\")]),e._v(\"，所以只要关注谁先被调用的。。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_5-4-题目四\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-4-题目四\"}},[e._v(\"#\")]),e._v(\" 5.4 题目四\")]),e._v(\" \"),n(\"p\",[e._v(\"正常情况下，\"),n(\"code\",[e._v(\"async\")]),e._v(\"中的\"),n(\"code\",[e._v(\"await\")]),e._v(\"命令是一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"对象，返回该对象的结果。\\n但如果不是\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"对象的话，就会直接返回对应的值，相当于\"),n(\"code\",[e._v(\"Promise.resolve()\")])]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function fn () {\\n  // return await 1234\\n  // 等同于\\n  return 123\\n}\\nfn().then(res => console.log(res))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"123\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_5-5-题目五\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-5-题目五\"}},[e._v(\"#\")]),e._v(\" 5.5 题目五\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  console.log('async1 start');\\n  await new Promise(resolve => {\\n    console.log('promise1')\\n  })\\n  console.log('async1 success');\\n  return 'async1 end'\\n}\\nconsole.log('srcipt start')\\nasync1().then(res => console.log(res))\\nconsole.log('srcipt end')\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"这道题目比较有意思，大家要注意了。\\n在\"),n(\"code\",[e._v(\"async1\")]),e._v(\"中\"),n(\"code\",[e._v(\"await\")]),e._v(\"后面的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"是没有返回值的，也就是它的状态始终是\"),n(\"code\",[e._v(\"pending\")]),e._v(\"状态，因此相当于一直在\"),n(\"code\",[e._v(\"await\")]),e._v(\"，\"),n(\"code\",[e._v(\"await\")]),e._v(\"，\"),n(\"code\",[e._v(\"await\")]),e._v(\"却始终没有响应...\")]),e._v(\" \"),n(\"p\",[e._v(\"所以在\"),n(\"code\",[e._v(\"await\")]),e._v(\"之后的内容是不会执行的，也包括\"),n(\"code\",[e._v(\"async1\")]),e._v(\"后面的 \"),n(\"code\",[e._v(\".then\")]),e._v(\"。\\n答案为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'script start'\\n'async1 start'\\n'promise1'\\n'script end'\\n\")])])]),n(\"h4\",{attrs:{id:\"_5-6-题目六\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-6-题目六\"}},[e._v(\"#\")]),e._v(\" 5.6 题目六\")]),e._v(\" \"),n(\"p\",[e._v(\"让我们给\"),n(\"code\",[e._v(\"5.5\")]),e._v(\"中的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"加上\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  console.log('async1 start');\\n  await new Promise(resolve => {\\n    console.log('promise1')\\n    resolve('promise1 resolve')\\n  }).then(res => console.log(res))\\n  console.log('async1 success');\\n  return 'async1 end'\\n}\\nconsole.log('srcipt start')\\nasync1().then(res => console.log(res))\\nconsole.log('srcipt end')\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"现在\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"有了返回值了，因此\"),n(\"code\",[e._v(\"await\")]),e._v(\"后面的内容将会被执行：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'script start'\\n'async1 start'\\n'promise1'\\n'script end'\\n'promise1 resolve'\\n'async1 success'\\n'async1 end'\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_5-7-题目七\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-7-题目七\"}},[e._v(\"#\")]),e._v(\" 5.7 题目七\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  console.log('async1 start');\\n  await new Promise(resolve => {\\n    console.log('promise1')\\n    resolve('promise resolve')\\n  })\\n  console.log('async1 success');\\n  return 'async1 end'\\n}\\nconsole.log('srcipt start')\\nasync1().then(res => {\\n  console.log(res)\\n})\\nnew Promise(resolve => {\\n  console.log('promise2')\\n  setTimeout(() => {\\n    console.log('timer')\\n  })\\n})\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"这道题应该也不难，不过有一点需要注意的，在\"),n(\"code\",[e._v(\"async1\")]),e._v(\"中的\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"它的\"),n(\"code\",[e._v(\"resovle\")]),e._v(\"的值和\"),n(\"code\",[e._v(\"async1().then()\")]),e._v(\"里的值是没有关系的，很多小伙伴可能看到\"),n(\"code\",[e._v(\"resovle('promise resolve')\")]),e._v(\"就会误以为是\"),n(\"code\",[e._v(\"async1().then()\")]),e._v(\"中的返回值。\\n因此这里的执行结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'script start'\\n'async1 start'\\n'promise1'\\n'promise2'\\n'async1 success'\\n'async1 end'\\n'timer'\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_5-8-题目八\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-8-题目八\"}},[e._v(\"#\")]),e._v(\" 5.8 题目八\")]),e._v(\" \"),n(\"p\",[e._v(\"我们再来看一道头条曾经的面试题：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function async1() {\\n  console.log(\"async1 start\");\\n  await async2();\\n  console.log(\"async1 end\");\\n}\\nasync function async2() {\\n  console.log(\"async2\");\\n}\\nconsole.log(\"script start\");\\nsetTimeout(function() {\\n  console.log(\"setTimeout\");\\n}, 0);\\nasync1();\\nnew Promise(function(resolve) {\\n  console.log(\"promise1\");\\n  resolve();\\n}).then(function() {\\n  console.log(\"promise2\");\\n});\\nconsole.log(\\'script end\\')\\n复制代码\\n')])])]),n(\"p\",[e._v(\"有了上面👆几题做基础，相信你很快也能答上来了。\")]),e._v(\" \"),n(\"p\",[e._v(\"自信的写下你们的答案吧。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'script start'\\n'async1 start'\\n'async2'\\n'promise1'\\n'script end'\\n'async1 end'\\n'promise2'\\n'setTimeout'\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"(这道题最后\"),n(\"code\",[e._v(\"async1 end\")]),e._v(\"和\"),n(\"code\",[e._v(\"promise2\")]),e._v(\"的顺序其实在网上饱受争议，我这里使用浏览器\"),n(\"code\",[e._v(\"Chrome V80\")]),e._v(\"，\"),n(\"code\",[e._v(\"Node v12.16.1\")]),e._v(\"的执行结果都是上面这个答案)\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_5-9-题目九\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-9-题目九\"}},[e._v(\"#\")]),e._v(\" 5.9 题目九\")]),e._v(\" \"),n(\"p\",[e._v(\"好的👌，\"),n(\"code\",[e._v(\"async/await\")]),e._v(\"大法已练成，咱们继续：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('async function testSometing() {\\n  console.log(\"执行testSometing\");\\n  return \"testSometing\";\\n}\\nasync function testAsync() {\\n  console.log(\"执行testAsync\");\\n  return Promise.resolve(\"hello async\");\\n}\\nasync function test() {\\n  console.log(\"test start...\");\\n  const v1 = await testSometing();\\n  console.log(v1);\\n  const v2 = await testAsync();\\n  console.log(v2);\\n  console.log(v1, v2);\\n}\\ntest();\\nvar promise = new Promise(resolve => {\\n  console.log(\"promise start...\");\\n  resolve(\"promise\");\\n});\\npromise.then(val => console.log(val));\\nconsole.log(\"test end...\");\\n复制代码\\n')])])]),n(\"p\",[e._v(\"答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'test start...'\\n'执行testSometing'\\n'promise start...'\\n'test end...'\\n'testSometing'\\n'执行testAsync'\\n'promise'\\n'hello async'\\n'testSometing' 'hello async'\\n复制代码\\n\")])])]),n(\"h3\",{attrs:{id:\"_6-async处理错误\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-async处理错误\"}},[e._v(\"#\")]),e._v(\" 6. async处理错误\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_6-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-1-题目一\"}},[e._v(\"#\")]),e._v(\" 6.1 题目一\")]),e._v(\" \"),n(\"p\",[e._v(\"在\"),n(\"code\",[e._v(\"async\")]),e._v(\"中，如果 \"),n(\"code\",[e._v(\"await\")]),e._v(\"后面的内容是一个异常或者错误的话，会怎样呢？\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  await async2();\\n  console.log('async1');\\n  return 'async1 success'\\n}\\nasync function async2 () {\\n  return new Promise((resolve, reject) => {\\n    console.log('async2')\\n    reject('error')\\n  })\\n}\\nasync1().then(res => console.log(res))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"例如这道题中，\"),n(\"code\",[e._v(\"await\")]),e._v(\"后面跟着的是一个状态为\"),n(\"code\",[e._v(\"rejected\")]),e._v(\"的\"),n(\"code\",[e._v(\"promise\")]),e._v(\"。\\n\"),n(\"strong\",[e._v(\"如果在async函数中抛出了错误，则终止错误结果，不会继续向下执行。\")]),e._v(\"\\n所以答案为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'async2'\\nUncaught (in promise) error\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"如果改为\"),n(\"code\",[e._v(\"throw new Error\")]),e._v(\"也是一样的：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  console.log('async1');\\n  throw new Error('error!!!')\\n  return 'async1 success'\\n}\\nasync1().then(res => console.log(res))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'async1'\\nUncaught (in promise) Error: error!!!\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_6-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-2-题目二\"}},[e._v(\"#\")]),e._v(\" 6.2 题目二\")]),e._v(\" \"),n(\"p\",[e._v(\"如果想要使得错误的地方不影响\"),n(\"code\",[e._v(\"async\")]),e._v(\"函数后续的执行的话，可以使用\"),n(\"code\",[e._v(\"try catch\")])]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  try {\\n    await Promise.reject('error!!!')\\n  } catch(e) {\\n    console.log(e)\\n  }\\n  console.log('async1');\\n  return Promise.resolve('async1 success')\\n}\\nasync1().then(res => console.log(res))\\nconsole.log('script start')\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"这里的结果为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'script start'\\n'error!!!'\\n'async1'\\n'async1 success'\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"或者你可以直接在\"),n(\"code\",[e._v(\"Promise.reject\")]),e._v(\"后面跟着一个\"),n(\"code\",[e._v(\"catch()\")]),e._v(\"方法：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"async function async1 () {\\n  // try {\\n  //   await Promise.reject('error!!!')\\n  // } catch(e) {\\n  //   console.log(e)\\n  // }\\n  await Promise.reject('error!!!')\\n    .catch(e => console.log(e))\\n  console.log('async1');\\n  return Promise.resolve('async1 success')\\n}\\nasync1().then(res => console.log(res))\\nconsole.log('script start')\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"运行结果是一样的。\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_7-综合题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-综合题\"}},[e._v(\"#\")]),e._v(\" 7. 综合题\")]),e._v(\" \"),n(\"p\",[e._v(\"上面👆的题目都是被我拆分着说一些功能点，现在让我们来做一些比较难的综合题吧。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_7-1-题目一\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-1-题目一\"}},[e._v(\"#\")]),e._v(\" 7.1 题目一\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const first = () => (new Promise((resolve, reject) => {\\n    console.log(3);\\n    let p = new Promise((resolve, reject) => {\\n        console.log(7);\\n        setTimeout(() => {\\n            console.log(5);\\n            resolve(6);\\n            console.log(p)\\n        }, 0)\\n        resolve(1);\\n    });\\n    resolve(2);\\n    p.then((arg) => {\\n        console.log(arg);\\n    });\\n}));\\nfirst().then((arg) => {\\n    console.log(arg);\\n});\\nconsole.log(4);\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"过程分析：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"第一段代码定义的是一个函数，所以我们得看看它是在哪执行的，发现它在\"),n(\"code\",[e._v(\"4\")]),e._v(\"之前，所以可以来看看\"),n(\"code\",[e._v(\"first\")]),e._v(\"函数里面的内容了。(这一步有点类似于题目\"),n(\"code\",[e._v(\"1.5\")]),e._v(\")\")]),e._v(\" \"),n(\"li\",[e._v(\"函数\"),n(\"code\",[e._v(\"first\")]),e._v(\"返回的是一个\"),n(\"code\",[e._v(\"new Promise()\")]),e._v(\"，因此先执行里面的同步代码\"),n(\"code\",[e._v(\"3\")])]),e._v(\" \"),n(\"li\",[e._v(\"接着又遇到了一个\"),n(\"code\",[e._v(\"new Promise()\")]),e._v(\"，直接执行里面的同步代码\"),n(\"code\",[e._v(\"7\")])]),e._v(\" \"),n(\"li\",[e._v(\"执行完\"),n(\"code\",[e._v(\"7\")]),e._v(\"之后，在\"),n(\"code\",[e._v(\"p\")]),e._v(\"中，遇到了一个定时器，先将它放到下一个宏任务队列里不管它，接着向下走\")]),e._v(\" \"),n(\"li\",[e._v(\"碰到了\"),n(\"code\",[e._v(\"resolve(1)\")]),e._v(\"，这里就把\"),n(\"code\",[e._v(\"p\")]),e._v(\"的状态改为了\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"，且返回值为\"),n(\"code\",[e._v(\"1\")]),e._v(\"，不过这里也先不执行\")]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"p\")]),e._v(\"，碰到了\"),n(\"code\",[e._v(\"resolve(2)\")]),e._v(\"，这里的\"),n(\"code\",[e._v(\"resolve(2)\")]),e._v(\"，表示的是把\"),n(\"code\",[e._v(\"first\")]),e._v(\"函数返回的那个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的状态改了，也先不管它。\")]),e._v(\" \"),n(\"li\",[e._v(\"然后碰到了\"),n(\"code\",[e._v(\"p.then\")]),e._v(\"，将它加入本次循环的微任务列表，等待执行\")]),e._v(\" \"),n(\"li\",[e._v(\"跳出\"),n(\"code\",[e._v(\"first\")]),e._v(\"函数，遇到了\"),n(\"code\",[e._v(\"first().then()\")]),e._v(\"，将它加入本次循环的微任务列表(\"),n(\"code\",[e._v(\"p.then\")]),e._v(\"的后面执行)\")]),e._v(\" \"),n(\"li\",[e._v(\"然后执行同步代码\"),n(\"code\",[e._v(\"4\")])]),e._v(\" \"),n(\"li\",[e._v(\"本轮的同步代码全部执行完毕，查找微任务列表，发现\"),n(\"code\",[e._v(\"p.then\")]),e._v(\"和\"),n(\"code\",[e._v(\"first().then()\")]),e._v(\"，依次执行，打印出\"),n(\"code\",[e._v(\"1和2\")])]),e._v(\" \"),n(\"li\",[e._v(\"本轮任务执行完毕了，发现还有一个定时器没有跑完，接着执行这个定时器里的内容，执行同步代码\"),n(\"code\",[e._v(\"5\")])]),e._v(\" \"),n(\"li\",[e._v(\"然后又遇到了一个\"),n(\"code\",[e._v(\"resolve(6)\")]),e._v(\"，它是放在\"),n(\"code\",[e._v(\"p\")]),e._v(\"里的，但是\"),n(\"code\",[e._v(\"p\")]),e._v(\"的状态在之前已经发生过改变了，因此这里就不会再改变，也就是说\"),n(\"code\",[e._v(\"resolve(6)\")]),e._v(\"相当于没任何用处，因此打印出来的\"),n(\"code\",[e._v(\"p\")]),e._v(\"为\"),n(\"code\",[e._v(\"Promise{<resolved>: 1}\")]),e._v(\"。(这一步类似于题目\"),n(\"code\",[e._v(\"3.1\")]),e._v(\")\")])]),e._v(\" \"),n(\"p\",[e._v(\"结果：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"3\\n7\\n4\\n1\\n2\\n5\\nPromise{<resolved>: 1}\\n\")])])]),n(\"h4\",{attrs:{id:\"_7-2-题目二\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-2-题目二\"}},[e._v(\"#\")]),e._v(\" 7.2 题目二\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const async1 = async () => {\\n  console.log('async1');\\n  setTimeout(() => {\\n    console.log('timer1')\\n  }, 2000)\\n  await new Promise(resolve => {\\n    console.log('promise1')\\n  })\\n  console.log('async1 end')\\n  return 'async1 success'\\n} \\nconsole.log('script start');\\nasync1().then(res => console.log(res));\\nconsole.log('script end');\\nPromise.resolve(1)\\n  .then(2)\\n  .then(Promise.resolve(3))\\n  .catch(4)\\n  .then(res => console.log(res))\\nsetTimeout(() => {\\n  console.log('timer2')\\n}, 1000)\\n\")])])]),n(\"p\",[e._v(\"注意的知识点：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[n(\"code\",[e._v(\"async\")]),e._v(\"函数中\"),n(\"code\",[e._v(\"await\")]),e._v(\"的\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"要是没有返回值的话则不执行后面的内容(类似题\"),n(\"code\",[e._v(\"5.5\")]),e._v(\")\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\".then\")]),e._v(\"函数中的参数期待的是函数，如果不是函数的话会发生透传(类似题\"),n(\"code\",[e._v(\"3.8\")]),e._v(\" )\")]),e._v(\" \"),n(\"li\",[e._v(\"注意定时器的延迟时间\")])]),e._v(\" \"),n(\"p\",[e._v(\"因此本题答案为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'script start'\\n'async1'\\n'promise1'\\n'script end'\\n1\\n'timer2'\\n'timer1'\\n\")])])]),n(\"h4\",{attrs:{id:\"_7-3-题目三\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-3-题目三\"}},[e._v(\"#\")]),e._v(\" 7.3 题目三\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const p1 = new Promise((resolve) => {\\n  setTimeout(() => {\\n    resolve('resolve3');\\n    console.log('timer1')\\n  }, 0)\\n  resolve('resovle1');\\n  resolve('resolve2');\\n}).then(res => {\\n  console.log(res)\\n  setTimeout(() => {\\n    console.log(p1)\\n  }, 1000)\\n}).finally(res => {\\n  console.log('finally', res)\\n})\\n\")])])]),n(\"p\",[e._v(\"注意的知识点：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[n(\"code\",[e._v(\"Promise\")]),e._v(\"的状态一旦改变就无法改变(类似题目\"),n(\"code\",[e._v(\"3.5\")]),e._v(\")\")]),e._v(\" \"),n(\"li\",[n(\"code\",[e._v(\"finally\")]),e._v(\"不管\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的状态是\"),n(\"code\",[e._v(\"resolved\")]),e._v(\"还是\"),n(\"code\",[e._v(\"rejected\")]),e._v(\"都会执行，且它的回调函数是接收不到\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的结果的，所以\"),n(\"code\",[e._v(\"finally()\")]),e._v(\"中的\"),n(\"code\",[e._v(\"res\")]),e._v(\"是一个迷惑项(类似\"),n(\"code\",[e._v(\"3.10\")]),e._v(\")。\")]),e._v(\" \"),n(\"li\",[e._v(\"最后一个定时器打印出的\"),n(\"code\",[e._v(\"p1\")]),e._v(\"其实是\"),n(\"code\",[e._v(\".finally\")]),e._v(\"的返回值，我们知道\"),n(\"code\",[e._v(\".finally\")]),e._v(\"的返回值如果在没有抛出错误的情况下默认会是上一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的返回值(\"),n(\"code\",[e._v(\"3.10\")]),e._v(\"中也有提到), 而这道题中\"),n(\"code\",[e._v(\".finally\")]),e._v(\"上一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"是\"),n(\"code\",[e._v(\".then()\")]),e._v(\"，但是这个\"),n(\"code\",[e._v(\".then()\")]),e._v(\"并没有返回值，所以\"),n(\"code\",[e._v(\"p1\")]),e._v(\"打印出来的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"的值会是\"),n(\"code\",[e._v(\"undefined\")]),e._v(\"，如果你在定时器的\"),n(\"strong\",[e._v(\"下面\")]),e._v(\"加上一个\"),n(\"code\",[e._v(\"return 1\")]),e._v(\"，则值就会变成\"),n(\"code\",[e._v(\"1\")]),e._v(\"(感谢掘友\"),n(\"a\",{attrs:{href:\"https://juejin.im/user/2260251637193639\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"JS丛中过\"),n(\"OutboundLink\")],1),e._v(\"的指出)。\")])]),e._v(\" \"),n(\"p\",[e._v(\"答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'resolve1'\\n'finally' undefined\\n'timer1'\\nPromise{<resolved>: undefined}\\n\")])])]),n(\"h3\",{attrs:{id:\"_8-几道大厂的面试题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-几道大厂的面试题\"}},[e._v(\"#\")]),e._v(\" 8. 几道大厂的面试题\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_8-1-使用promise实现每隔1秒输出1-2-3\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-1-使用promise实现每隔1秒输出1-2-3\"}},[e._v(\"#\")]),e._v(\" 8.1 使用Promise实现每隔1秒输出1,2,3\")]),e._v(\" \"),n(\"p\",[e._v(\"这道题比较简单的一种做法是可以用\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"配合着\"),n(\"code\",[e._v(\"reduce\")]),e._v(\"不停的在\"),n(\"code\",[e._v(\"promise\")]),e._v(\"后面叠加\"),n(\"code\",[e._v(\".then\")]),e._v(\"，请看下面的代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const arr = [1, 2, 3]\\narr.reduce((p, x) => {\\n  return p.then(() => {\\n    return new Promise(r => {\\n      setTimeout(() => r(console.log(x)), 1000)\\n    })\\n  })\\n}, Promise.resolve())\\n\")])])]),n(\"p\",[e._v(\"或者你可以更简单一点写：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const arr = [1, 2, 3]\\narr.reduce((p, x) => p.then(() => new Promise(r => setTimeout(() => r(console.log(x)), 1000))), Promise.resolve())\\n\")])])]),n(\"p\",[e._v(\"参考链接：\"),n(\"a\",{attrs:{href:\"https://link.juejin.cn/?target=https%3A%2F%2Fsegmentfault.com%2Fq%2F1010000010748967\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"如何让异步操作顺序执行\"),n(\"OutboundLink\")],1),e._v(\" \"),n(\"strong\",[e._v(\"拓展题\")]),e._v(\"\\n这道拓展题来自于“万物皆可爱的\"),n(\"a\",{attrs:{href:\"https://juejin.im/user/2436173498955032\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"LINGLONG\"),n(\"OutboundLink\")],1),e._v(\" ”小姐姐，炒鸡棒 😁👍。\\n题目是这样的，她把我上面👆写的箭头函数版本改造了一下：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const arr = [1, 2, 3];\\nconst result = arr.reduce((p, x) => p.then(new Promise(r => setTimeout(() => r(console.log(x)), 1000))), Promise.resolve());\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"眼尖的小伙伴看出区别了吗？😁\\n\"),n(\"code\",[e._v(\"p.then\")]),e._v(\"里的代码由\"),n(\"code\",[e._v(\"() => new Promise(...)\")]),e._v(\"变成了\"),n(\"code\",[e._v(\"new Promise(...)\")]),e._v(\"。\\n现在执行结果就大不相同了。\\n\"),n(\"strong\",[e._v(\"在一秒后按顺序同时打印出\"),n(\"code\",[e._v(\"1、2、3\")]),e._v(\":\")])]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"1\\n2\\n3\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"咦 🤔️？为什么会这样呢 🤔️？\\n只是一个小小的改变却有大大的区别。\\n其实刚开始看到的时候霖呆呆我也愣了那么几秒😂。不过等我们一步一步拆分并对想不通的地方写了几个案例来看就理解了。\\n评论区和小姐姐扯了一大堆，结果把她越弄越糊😂。后来我改变了一种思路来描述，觉得应该直接上伪代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const arr = [1, 2, 3]\\narr.reduce((p, x) => p.then(() => new Promise(r => setTimeout(() => r(console.log(x)), 1000))), Promise.resolve())\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"转换为伪代码就是这样：\\n(相当于是用\"),n(\"code\",[e._v(\"reduce\")]),e._v(\"不停的往后面叠加\"),n(\"code\",[e._v(\".then\")]),e._v(\")\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve()\\n  .then(() => {\\n    return new Promise(r => {\\n      setTimeout(() => {\\n        r(console.log(1))\\n      }, 1000)\\n    })\\n  })\\n  .then(r => {\\n    return new Promise(r => {\\n      setTimeout(() => {\\n        r(console.log(2))\\n      }, 1000)\\n    })\\n  })\\n  .then(r => {\\n    return new Promise(r => {\\n      setTimeout(() => {\\n        r(console.log(3))\\n      }, 1000)\\n    })\\n  })\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"可以看到，每一个\"),n(\"code\",[e._v(\".then\")]),e._v(\"都是依赖于上一个\"),n(\"code\",[e._v(\"new Promise\")]),e._v(\"何时被\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"了才会执行的，例如第二个\"),n(\"code\",[e._v(\".then()\")]),e._v(\"，它要等\"),n(\"code\",[e._v(\"r(console.log(1)\")]),e._v(\"这段代码执行了，才会执行。\\n那么\"),n(\"code\",[e._v(\"r(console.log(1))\")]),e._v(\"什么时候执行呢？就是在第一个定时器(也就是一秒后)触发的时候才执行。这样就保证了后面接着的\"),n(\"code\",[e._v(\".then()\")]),e._v(\"要等前一个定时器执行完才能执行，也就是隔一秒输出。\\n而如果是这样写的话：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const arr = [1, 2, 3];\\nconst result = arr.reduce((p, x) => p.then(new Promise(r => setTimeout(() => r(console.log(x)), 1000))), Promise.resolve());\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"它的伪代码就是这样：\\n(每个\"),n(\"code\",[e._v(\"then\")]),e._v(\"里面的第一个参数不是一个函数)\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Promise.resolve()\\n  .then(new Promise(r => {\\n    setTimeout(() => {\\n      r(console.log(1))\\n    }, 1000)\\n  }))\\n  .then(new Promise(r => {\\n    setTimeout(() => {\\n      r(console.log(2))\\n    }, 1000)\\n  }))\\n  .then(new Promise(r => {\\n    setTimeout(() => {\\n      r(console.log(3))\\n    }, 1000)\\n  }))\\n复制代码\\n\")])])]),n(\"p\",[n(\"code\",[e._v(\"p.then()\")]),e._v(\"里面的参数如果不是函数的话，会发生透传，这个在\"),n(\"code\",[e._v(\"3.8\")]),e._v(\"中已经提过了。但是发生透传，\"),n(\"code\",[e._v(\".then()\")]),e._v(\"里的代码就不执行了吗？\\n并不是的，我们来看这个例子：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const p = Promise.resolve(1).then(console.log('我不关心结果'))\\nconsole.log(p)\\np.then((res) => console.log(res))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"很明显这里也发生了透传，但是\"),n(\"code\",[e._v(\"'我不关心结果'\")]),e._v(\"也还是被打印出来了，并且由于透传，\"),n(\"code\",[e._v(\"p.then()\")]),e._v(\"里获取到的\"),n(\"code\",[e._v(\"res\")]),e._v(\"就是\"),n(\"code\",[e._v(\"1\")]),e._v(\"，因此会打印出：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"'我不关心结果'\\nPromise{\\n[[PromiseStatus]]: \\\"resolved\\\"\\n[[PromiseValue]]: 1\\n}\\n1\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"(第二行打印出\"),n(\"code\",[e._v(\"Promise{<pending>}\")]),e._v(\"的小伙伴请把这个对象展开来看)\\n这个例子表明，就算发生了透传，\"),n(\"code\",[e._v(\"p.then()\")]),e._v(\"中的代码依旧也是会执行的。\\n所以回到\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\".then(new Promise(r => {\\n    setTimeout(() => {\\n      r(console.log(1))\\n    }, 1000)\\n  }))\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"中，现在\"),n(\"code\",[e._v(\".then()\")]),e._v(\"中就相当于是执行一段同步代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"new Promise(r => {\\n    setTimeout(() => {\\n      r(console.log(1))\\n    }, 1000)\\n  })\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"而这段代码的作用是向延迟队列中\"),n(\"code\",[e._v(\"push\")]),e._v(\"一个一秒后执行的定时器任务。\\n并且在\"),n(\"code\",[e._v(\"push\")]),e._v(\"完定时器之后，代码就马上进入了下一个\"),n(\"code\",[e._v(\".then\")]),e._v(\"(因为既然第一个\"),n(\"code\",[e._v(\".then\")]),e._v(\"已经是透传的了就没有必要等它的执行结果了)\\n下一个\"),n(\"code\",[e._v(\".then\")]),e._v(\"竟然也是一个透传，OK，那我继续\"),n(\"code\",[e._v(\"push\")]),e._v(\"这个定时器，然后再执行第三个\"),n(\"code\",[e._v(\".then\")]),e._v(\"。\\n三个\"),n(\"code\",[e._v(\".then\")]),e._v(\"已经执行完成了，现在我们的延迟队列中已经有了三个定时器等待执行，\"),n(\"strong\",[e._v(\"并且三个定时器的延迟时间都是1000ms!!!\")]),e._v(\"。\\n所以等到了时间之后，就会同时打印出来了\"),n(\"code\",[e._v(\"1、2、3\")]),e._v(\"。（其实准确来说，不是同时打印的，不过中间相差的时间非常非常短，大可忽略它）\\n现在你是否理解了其中的区别呢 😝。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_8-2-使用promise实现红绿灯交替重复亮\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-2-使用promise实现红绿灯交替重复亮\"}},[e._v(\"#\")]),e._v(\" 8.2 使用Promise实现红绿灯交替重复亮\")]),e._v(\" \"),n(\"p\",[e._v(\"红灯3秒亮一次，黄灯2秒亮一次，绿灯1秒亮一次；如何让三个灯不断交替重复亮灯？（用Promise实现）三个亮灯函数已经存在：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function red() {\\n    console.log('red');\\n}\\nfunction green() {\\n    console.log('green');\\n}\\nfunction yellow() {\\n    console.log('yellow');\\n}\\n复制代码\\n\")])])]),n(\"p\",[e._v(\"答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('function red() {\\n  console.log(\"red\");\\n}\\nfunction green() {\\n  console.log(\"green\");\\n}\\nfunction yellow() {\\n  console.log(\"yellow\");\\n}\\nconst light = function (timer, cb) {\\n  return new Promise(resolve => {\\n    setTimeout(() => {\\n      cb()\\n      resolve()\\n    }, timer)\\n  })\\n}\\nconst step = function () {\\n  Promise.resolve().then(() => {\\n    return light(3000, red)\\n  }).then(() => {\\n    return light(2000, green)\\n  }).then(() => {\\n    return light(1000, yellow)\\n  }).then(() => {\\n    return step()\\n  })\\n}\\nstep();\\n复制代码\\n')])])]),n(\"h4\",{attrs:{id:\"_8-3-实现mergepromise函数\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-3-实现mergepromise函数\"}},[e._v(\"#\")]),e._v(\" 8.3 实现mergePromise函数\")]),e._v(\" \"),n(\"p\",[e._v(\"实现mergePromise函数，把传进去的数组按顺序先后执行，并且把返回的数据先后放到数组data中。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const time = (timer) => {\\n  return new Promise(resolve => {\\n    setTimeout(() => {\\n      resolve()\\n    }, timer)\\n  })\\n}\\nconst ajax1 = () => time(2000).then(() => {\\n  console.log(1);\\n  return 1\\n})\\nconst ajax2 = () => time(1000).then(() => {\\n  console.log(2);\\n  return 2\\n})\\nconst ajax3 = () => time(1000).then(() => {\\n  console.log(3);\\n  return 3\\n})\\nfunction mergePromise () {\\n  // 在这里写代码\\n}\\nmergePromise([ajax1, ajax2, ajax3]).then(data => {\\n  console.log(\"done\");\\n  console.log(data); // data 为 [1, 2, 3]\\n});\\n// 要求分别输出\\n// 1\\n// 2\\n// 3\\n// done\\n// [1, 2, 3]\\n复制代码\\n')])])]),n(\"p\",[e._v(\"这道题有点类似于\"),n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"，不过\"),n(\"code\",[e._v(\".all()\")]),e._v(\"不需要管执行顺序，只需要并发执行就行了。但是这里需要等上一个执行完毕之后才能执行下一个。\\n解题思路：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"定义一个数组\"),n(\"code\",[e._v(\"data\")]),e._v(\"用于保存所有异步操作的结果\")]),e._v(\" \"),n(\"li\",[e._v(\"初始化一个\"),n(\"code\",[e._v(\"const promise = Promise.resolve()\")]),e._v(\"，然后循环遍历数组，在\"),n(\"code\",[e._v(\"promise\")]),e._v(\"后面添加执行\"),n(\"code\",[e._v(\"ajax\")]),e._v(\"任务，同时要将添加的结果重新赋值到\"),n(\"code\",[e._v(\"promise\")]),e._v(\"上。\")])]),e._v(\" \"),n(\"p\",[e._v(\"答案：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function mergePromise (ajaxArray) {\\n  // 存放每个ajax的结果\\n  const data = [];\\n  let promise = Promise.resolve();\\n  ajaxArray.forEach(ajax => {\\n  \\t// 第一次的then为了用来调用ajax\\n  \\t// 第二次的then是为了获取ajax的结果\\n    promise = promise.then(ajax).then(res => {\\n      data.push(res);\\n      return data; // 把每次的结果返回\\n    })\\n  })\\n  // 最后得到的promise它的值就是data\\n  return promise;\\n}\\n复制代码\\n\")])])]),n(\"h4\",{attrs:{id:\"_8-4-根据promisea-实现一个自己的promise\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-4-根据promisea-实现一个自己的promise\"}},[e._v(\"#\")]),e._v(\" 8.4 根据promiseA+实现一个自己的promise\")]),e._v(\" \"),n(\"p\",[e._v(\"说真的，这道题被问到的概率还是挺高的，而且要说的内容也很多...\")]),e._v(\" \"),n(\"p\",[e._v(\"来吧，给你们一些好的宝典：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[n(\"a\",{attrs:{href:\"https://juejin.im/post/6844903607968481287#heading-7\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"《Promise不会？？看这里！！！史上最通俗易懂的Promise！！！》\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"li\",[n(\"a\",{attrs:{href:\"https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F23312442\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"《写一个符合 Promises/A+ 规范并可配合 ES7 async/await 使用的 Promise》\"),n(\"OutboundLink\")],1)])]),e._v(\" \"),n(\"h4\",{attrs:{id:\"_8-5-封装一个异步加载图片的方法\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-5-封装一个异步加载图片的方法\"}},[e._v(\"#\")]),e._v(\" 8.5 封装一个异步加载图片的方法\")]),e._v(\" \"),n(\"p\",[e._v(\"这个相对简单一些，只需要在图片的\"),n(\"code\",[e._v(\"onload\")]),e._v(\"函数中，使用\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"返回一下就可以了。\\n来看看具体代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function loadImg(url) {\\n  return new Promise((resolve, reject) => {\\n    const img = new Image();\\n    img.onload = function() {\\n      console.log(\\\"一张图片加载完成\\\");\\n      resolve(img);\\n    };\\n    img.onerror = function() {\\n    \\treject(new Error('Could not load image at' + url));\\n    };\\n    img.src = url;\\n  });\\n\")])])]),n(\"h4\",{attrs:{id:\"_8-6-限制异步操作的并发个数并尽可能快的完成全部\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-6-限制异步操作的并发个数并尽可能快的完成全部\"}},[e._v(\"#\")]),e._v(\" 8.6 限制异步操作的并发个数并尽可能快的完成全部\")]),e._v(\" \"),n(\"p\",[e._v(\"有8个图片资源的url，已经存储在数组\"),n(\"code\",[e._v(\"urls\")]),e._v(\"中。\\n\"),n(\"code\",[e._v(\"urls\")]),e._v(\"类似于\"),n(\"code\",[e._v(\"['https://image1.png', 'https://image2.png', ....]\")]),e._v(\"\\n而且已经有一个函数\"),n(\"code\",[e._v(\"function loadImg\")]),e._v(\"，输入一个\"),n(\"code\",[e._v(\"url\")]),e._v(\"链接，返回一个\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"，该\"),n(\"code\",[e._v(\"Promise\")]),e._v(\"在图片下载完成的时候\"),n(\"code\",[e._v(\"resolve\")]),e._v(\"，下载失败则\"),n(\"code\",[e._v(\"reject\")]),e._v(\"。\\n但有一个要求，任何时刻同时下载的链接\"),n(\"strong\",[e._v(\"数量不可以超过3个\")]),e._v(\"。\\n请写一段代码实现这个需求，要求\"),n(\"strong\",[e._v(\"尽可能快速\")]),e._v(\"地将所有图片下载完成。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('var urls = [\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting1.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting2.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting3.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting4.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting5.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn6.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn7.png\",\\n  \"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn8.png\",\\n];\\nfunction loadImg(url) {\\n  return new Promise((resolve, reject) => {\\n    const img = new Image();\\n    img.onload = function() {\\n      console.log(\"一张图片加载完成\");\\n      resolve(img);\\n    };\\n    img.onerror = function() {\\n    \\treject(new Error(\\'Could not load image at\\' + url));\\n    };\\n    img.src = url;\\n  });\\n复制代码\\n')])])]),n(\"p\",[e._v(\"看到这道题时，我最开始的想法是：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"拿到\"),n(\"code\",[e._v(\"urls\")]),e._v(\"，然后将这个数组每3个\"),n(\"code\",[e._v(\"url\")]),e._v(\"一组创建成一个二维数组\")]),e._v(\" \"),n(\"li\",[e._v(\"然后用\"),n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"每次加载一组\"),n(\"code\",[e._v(\"url\")]),e._v(\"（也就是并发3个），这一组加载完再加载下一组。\")])]),e._v(\" \"),n(\"p\",[e._v(\"这个想法从技术上说并不难实现，有点类似于第三题。不过缺点也明显，那就是每次都要等到上一组全部加载完之后，才加载下一组，那如果上一组有\"),n(\"code\",[e._v(\"2\")]),e._v(\"个已经加载完了，还有\"),n(\"code\",[e._v(\"1\")]),e._v(\"个特别慢，还在加载，要等这个慢的也加载完才能进入下一组。这明显会照常卡顿，影响加载效率。\\n但是开始没有考虑这么多，因此有了第一个版本。\\n\"),n(\"strong\",[e._v(\"如果你有兴趣可以看看想法一的代码，虽然对你没什么帮助，想直接知道比较好的做法的小伙伴请跳到想法二\")])]),e._v(\" \"),n(\"p\",[n(\"strong\",[e._v(\"想法一\")]),e._v(\"💡：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"function limitLoad (urls, handler, limit) {\\n  const data = []; // 存储所有的加载结果\\n  let p = Promise.resolve();\\n  const handleUrls = (urls) => { // 这个函数是为了生成3个url为一组的二维数组\\n    const doubleDim = [];\\n    const len = Math.ceil(urls.length / limit); // Math.ceil(8 / 3) = 3\\n    console.log(len) // 3, 表示二维数组的长度为3\\n    for (let i = 0; i < len; i++) {\\n      doubleDim.push(urls.slice(i * limit, (i + 1) * limit))\\n    }\\n    return doubleDim;\\n  }\\n  const ajaxImage = (urlCollect) => { // 将一组字符串url 转换为一个加载图片的数组\\n    console.log(urlCollect)\\n    return urlCollect.map(url => handler(url))\\n  }\\n  const doubleDim = handleUrls(urls); // 得到3个url为一组的二维数组\\n  doubleDim.forEach(urlCollect => {\\n    p = p.then(() => Promise.all(ajaxImage(urlCollect))).then(res => {\\n      data.push(...res); // 将每次的结果展开，并存储到data中 (res为：[img, img, img])\\n      return data;\\n    })\\n  })\\n  return p;\\n}\\nlimitLoad(urls, loadImg, 3).then(res => {\\n  console.log(res); // 最终得到的是长度为8的img数组: [img, img, img, ...]\\n  res.forEach(img => {\\n    document.body.appendChild(img);\\n  })\\n});\\n复制代码\\n\")])])]),n(\"p\",[n(\"strong\",[e._v(\"想法二\")]),e._v(\"💡：\\n参考\"),n(\"a\",{attrs:{href:\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F4bb1521343ba\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"LHH大翰仔仔-Promise面试题\"),n(\"OutboundLink\")],1),e._v(\"\\n既然题目的要求是保证每次并发请求的数量为3，那么我们可以先请求\"),n(\"code\",[e._v(\"urls\")]),e._v(\"中的前面三个(下标为\"),n(\"code\",[e._v(\"0,1,2\")]),e._v(\")，并且请求的时候使用\"),n(\"code\",[e._v(\"Promise.race()\")]),e._v(\"来同时请求，三个中有一个先完成了(例如下标为\"),n(\"code\",[e._v(\"1\")]),e._v(\"的图片)，我们就把这个当前数组中已经完成的那一项(第\"),n(\"code\",[e._v(\"1\")]),e._v(\"项)换成还没有请求的那一项(\"),n(\"code\",[e._v(\"urls\")]),e._v(\"中下标为\"),n(\"code\",[e._v(\"3\")]),e._v(\")。\\n直到\"),n(\"code\",[e._v(\"urls\")]),e._v(\"已经遍历完了，然后将最后三个没有完成的请求(也就是状态没有改变的\"),n(\"code\",[e._v(\"Promise\")]),e._v(\")用\"),n(\"code\",[e._v(\"Promise.all()\")]),e._v(\"来加载它们。\\n不多说，流程图都给你画好了，你可以结合流程图再来看代码。\\n\"),n(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2021/webp/12821255/1626357897791-69df6288-2c0c-422b-b367-39ab05c6746d.webp#align=left&display=inline&height=804&margin=%5Bobject%20Object%5D&originHeight=804&originWidth=1280&size=0&status=done&style=none&width=1280\",alt:\"\"}}),e._v(\"\\n为了方便你查看，我截了个图，不过代码在后面也有\\n(说真的，要我看这一大长串代码我也不愿意...)\\n\"),n(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2021/webp/12821255/1626357897801-d7ac1182-8591-4407-8697-0327bc34953b.webp#align=left&display=inline&height=1280&margin=%5Bobject%20Object%5D&originHeight=1280&originWidth=864&size=0&status=done&style=none&width=864\",alt:\"\"}}),e._v(\"\\n代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('function limitLoad(urls, handler, limit) {\\n  let sequence = [].concat(urls); // 复制urls\\n  // 这一步是为了初始化 promises 这个\"容器\"\\n  let promises = sequence.splice(0, limit).map((url, index) => {\\n    return handler(url).then(() => {\\n      // 返回下标是为了知道数组中是哪一项最先完成\\n      return index;\\n    });\\n  });\\n  // 注意这里要将整个变量过程返回，这样得到的就是一个Promise，可以在外面链式调用\\n  return sequence\\n    .reduce((pCollect, url) => {\\n      return pCollect\\n        .then(() => {\\n          return Promise.race(promises); // 返回已经完成的下标\\n        })\\n        .then(fastestIndex => { // 获取到已经完成的下标\\n        \\t// 将\"容器\"内已经完成的那一项替换\\n          promises[fastestIndex] = handler(url).then(\\n            () => {\\n              return fastestIndex; // 要继续将这个下标返回，以便下一次变量\\n            }\\n          );\\n        })\\n        .catch(err => {\\n          console.error(err);\\n        });\\n    }, Promise.resolve()) // 初始化传入\\n    .then(() => { // 最后三个用.all来调用\\n      return Promise.all(promises);\\n    });\\n}\\nlimitLoad(urls, loadImg, 3)\\n  .then(res => {\\n    console.log(\"图片全部加载完毕\");\\n    console.log(res);\\n  })\\n  .catch(err => {\\n    console.error(err);\\n  });\\n')])])]),n(\"p\",[e._v(\"作者：LinDaiDai_霖呆呆\\n链接：\"),n(\"a\",{attrs:{href:\"https://juejin.cn/post/6844904077537574919\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"https://juejin.cn/post/6844904077537574919\"),n(\"OutboundLink\")],1),e._v(\"\\n来源：掘金\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\")])])}),[],!1,null,null,null);s.default=o.exports}}]);","extractedComments":[]}