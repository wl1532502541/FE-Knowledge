{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{382:function(t,e,a){\"use strict\";a.r(e);var s=a(45),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"vuex\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vuex\"}},[t._v(\"#\")]),t._v(\" Vuex\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"什么是vuex\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是vuex\"}},[t._v(\"#\")]),t._v(\" 什么是vuex\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"VueX\")]),t._v(\"是适用于在\"),a(\"code\",[t._v(\"Vue\")]),t._v(\"项目开发时使用的状态管理工具。\"),a(\"code\",[t._v(\"Vue\")]),t._v(\"为这些被多个组件频繁使用的值提供了一个统一管理的工具——\"),a(\"code\",[t._v(\"VueX\")]),t._v(\"。在具有\"),a(\"code\",[t._v(\"VueX\")]),t._v(\"的\"),a(\"code\",[t._v(\"Vue\")]),t._v(\"项目中，我们只需要把这些值定义在\"),a(\"code\",[t._v(\"VueX\")]),t._v(\"中，即可在整个\"),a(\"code\",[t._v(\"Vue\")]),t._v(\"项目的组件中使用。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"如何安装vuex\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何安装vuex\"}},[t._v(\"#\")]),t._v(\" 如何安装vuex\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"npm\")]),t._v(\"安装\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm i vuex -s\\n复制代码\\n\")])])]),a(\"h2\",{attrs:{id:\"如何使用vuex\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用vuex\"}},[t._v(\"#\")]),t._v(\" 如何使用vuex\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"在项目的根目录下新增一个store文件夹，在该文件夹内创建index.js\")]),t._v(\"\\n此时项目的\"),a(\"code\",[t._v(\"src\")]),t._v(\"文件夹是这样的\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"│  App.vue\\n│  main.js\\n│\\n├─assets\\n│      logo.png\\n│\\n├─components\\n│      HelloWorld.vue\\n│\\n├─router\\n│      index.js\\n│\\n└─store\\n       index.js\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"在store.js文件中，引入vuex并且使用vuex，这里注意变量名是大写Vue和Vuex\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//store.js\\nimport Vue from 'vue'\\nimport Vuex from 'vuex'\\n//挂载Vuex\\nVue.use(Vuex)\\n//创建VueX对象\\nconst store = new Vuex.Store({\\n    state:{\\n        //存放的键值对就是所要管理的状态\\n        name:'helloVueX'\\n    }\\n})\\nexport default store\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"将store挂载到当前项目的Vue实例当中去\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//main.js\\nimport store from './store'\\nnew Vue({\\n  el: '#app',\\n  router,\\n  store,  // 和router一样，将我们创建的Vuex实例挂载到这个vue实例中\\n  render: h => h(App)\\n})\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"在组件中使用Vuex\")]),t._v(\"\\n例如在\"),a(\"code\",[t._v(\"App.vue\")]),t._v(\"中，我们要将\"),a(\"code\",[t._v(\"state\")]),t._v(\"中定义的\"),a(\"code\",[t._v(\"name\")]),t._v(\"拿来在\"),a(\"code\",[t._v(\"h1标签\")]),t._v(\"中显示\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"<template>\\n    <div id='app'>\\n        name:\\n        <h1>{{ $store.state.name }}</h1>\\n    </div>\\n</template>\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"或者要在组件方法中使用\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods:{\\n    add(){\\n      console.log(this.$store.state.name)\\n    }\\n},\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"具体的使用方法下面会详细介绍\\n\"),a(\"strong\",[t._v(\"注意\")]),t._v(\":\"),a(\"code\",[t._v(\"vuex\")]),t._v(\"的出现是为了解决组件间的通信问题,如果某个操作或者数据不涉及到公共操作,只是单一组件操作,不要把这些状态值或者\"),a(\"code\",[t._v(\"function\")]),t._v(\"存储到\"),a(\"code\",[t._v(\"vuex\")]),t._v(\"中,因为\"),a(\"code\",[t._v(\"vuex\")]),t._v(\"会把自身挂载到所有组件上,不管当前组件是否用到里面的东西,因此这事实上肯定增加了性能的损耗的.\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"vuex中的核心内容\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vuex中的核心内容\"}},[t._v(\"#\")]),t._v(\" VueX中的核心内容\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"vuex\")]),t._v(\"中，有默认的五种基本的对象：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"state\")]),t._v(\"：存储状态（变量）\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"getters\")]),t._v(\"：对数据获取之前的再次编译，可以理解为\"),a(\"code\",[t._v(\"state\")]),t._v(\"的计算属性。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"mutations\")]),t._v(\"：修改状态，并且是同步的。这个和我们组件中的自定义事件类似。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"actions\")]),t._v(\"：异步操作。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"modules\")]),t._v(\"：\"),a(\"code\",[t._v(\"store\")]),t._v(\"的子模块\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"拆分成单文件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#拆分成单文件\"}},[t._v(\"#\")]),t._v(\" 拆分成单文件\")]),t._v(\" \"),a(\"p\",[t._v(\"如果项目中的状态和方法过多,\"),a(\"code\",[t._v(\"index.js\")]),t._v(\"文件看起来就会很臃肿并且不好维护,这个时候我们就可以把\"),a(\"code\",[t._v(\"state\")]),t._v(\",\"),a(\"code\",[t._v(\"getters\")]),t._v(\",\"),a(\"code\",[t._v(\"mutations\")]),t._v(\",\"),a(\"code\",[t._v(\"actions\")]),t._v(\"拆分成单个文件,有利于进行管理\\n此时\"),a(\"strong\",[t._v(\"目录结构\")]),t._v(\"是这样的\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"store\\n│      \\n│\\n├─index.js\\n│      \\n│      \\n├─state.js\\n│      \\n│\\n├─getters.js\\n│      \\n│\\n├─mutations.js\\n│      \\n│\\n└─actions.js\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"index.js\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import Vue from 'vue';\\nimport Vuex from 'vuex';\\nimport state from './state';\\nimport getters from './getters';\\nimport mutations from './mutations';\\nimport actions from './actions';\\nVue.use(Vuex);\\nexport default new Vuex.Store({\\n  state,\\n  mutations,\\n  actions,\\n  getters,\\n});\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"其他的文件中只需要\"),a(\"code\",[t._v(\"export\")]),t._v(\"导出即可\\n\"),a(\"strong\",[t._v(\"state.js\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"export default {\\n  name:'hzw'\\n};\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"mutations.js\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"export default {\\n changeName(state, name) {\\n    state.name = name;\\n  },\\n};\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"getters.js\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('export default {\\n realName(state) {\\n    return \"姓名:\" + state.name\\n  },\\n};\\n复制代码\\n')])])]),a(\"p\",[a(\"strong\",[t._v(\"actions.js\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"export default {\\n changeName({ commit }, name) {\\n        return commit('changeName', name)\\n    }\\n};\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"这样看起来就更有结构感,也更易于维护了\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"state以及mapstate\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#state以及mapstate\"}},[t._v(\"#\")]),t._v(\" state以及mapState\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是state\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是state\"}},[t._v(\"#\")]),t._v(\" 什么是state\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"state(vuex) ≈ data (vue)\")]),t._v(\" \"),a(\"code\",[t._v(\"vuex\")]),t._v(\"的\"),a(\"code\",[t._v(\"state\")]),t._v(\"和\"),a(\"code\",[t._v(\"vue\")]),t._v(\"的\"),a(\"code\",[t._v(\"data\")]),t._v(\"有很多相似之处,都是用于存储一些数据,或者说状态值.这些值都将被挂载数据和\"),a(\"code\",[t._v(\"dom\")]),t._v(\"的双向绑定事件,也就是当值改变的时候可以触发\"),a(\"code\",[t._v(\"dom\")]),t._v(\"的更新.\\n我们在\"),a(\"code\",[t._v(\"state.js\")]),t._v(\"中声明一个状态\"),a(\"code\",[t._v(\"count\")]),t._v(\",初始值为\"),a(\"code\",[t._v(\"0\")]),t._v(\",然后在组件中输出它\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"// state.js \\nexport default {\\n  count:'0'\\n};\\n复制代码\\n\")])])]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('//组件中\\n<template>\\n  <div class=\"hello\">\\n    <h3>{{$store.state.count}}</h3>\\n  </div>\\n</template>\\n复制代码\\n')])])]),a(\"p\",[t._v(\"结果如下图所示\\n\"),a(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2021/png/12821255/1627540554815-5828eeef-b7b5-403d-b925-0edfc600c0c6.png#align=left&display=inline&height=645&margin=%5Bobject%20Object%5D&originHeight=645&originWidth=746&size=0&status=done&style=none&width=746\",alt:\"\"}}),t._v(\" \"),a(\"strong\",[t._v(\"注意\")]),t._v(\":虽然\"),a(\"code\",[t._v(\"state\")]),t._v(\"和\"),a(\"code\",[t._v(\"data\")]),t._v(\"有很多相似之处,但\"),a(\"code\",[t._v(\"state\")]),t._v(\"在使用的时候一般被挂载到子组件的\"),a(\"code\",[t._v(\"computed\")]),t._v(\"计算属性上,这样有利于\"),a(\"code\",[t._v(\"state\")]),t._v(\"的值发生改变的时候及时响应给子组件.如果用\"),a(\"code\",[t._v(\"data\")]),t._v(\"去接收\"),a(\"code\",[t._v(\"$store.state\")]),t._v(\",也是可以接收到值的,但是由于这只是一个简单的赋值操作,所以\"),a(\"code\",[t._v(\"state\")]),t._v(\"中的状态改变的时候不能被\"),a(\"code\",[t._v(\"vue\")]),t._v(\"中的\"),a(\"code\",[t._v(\"data\")]),t._v(\"监听到.也可以通过\"),a(\"code\",[t._v(\"watch $store\")]),t._v(\"去解决这个问题,但是稍微有点麻烦.\\n所以,最好还是用\"),a(\"code\",[t._v(\"computed\")]),t._v(\"去接收\"),a(\"code\",[t._v(\"state\")]),t._v(\",如下,修改\"),a(\"code\",[t._v(\"state\")]),t._v(\"的方法后面会学习,这里先进行展示.\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//mutations.js\\nexport default {\\n  add(state, n = 0) {\\n    return (state.count += n)\\n  },\\n  reduce(state, n = 0) {\\n    return (state.count -= n)\\n  }\\n}\\n复制代码\\n\")])])]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//组件中\\n<template>\\n  <div class=\\\"hello\\\">\\n    <h3>{{$store.state.count}}</h3>\\n    <div>\\n      <button @click=\\\"add(10)\\\">增加</button>\\n      <button @click=\\\"reduce(10)\\\">减少</button>\\n      <div>computed:{{dataCount}}</div>\\n        <div>data: {{count}}</div>\\n    </div>\\n  </div>\\n</template>\\n<script>\\nexport default {\\n  name: 'HelloWorld',\\n   data () {\\n    return {\\n      dataCount: this.$store.state.count //用data接收\\n    }\\n  },\\n  computed:{\\n    count(){\\n      return this.$store.state.count //用computed接收\\n    }\\n  },\\n  methods: {\\n    add(n){\\n      this.$store.commit('add',n);\\n    },\\n   reduce(n){\\n      this.$store.commit('reduce',n);\\n    }\\n  }\\n}\\n<\\/script>\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"然后我们点击增加按钮,看看会发生什么变化,结果如下\\n\"),a(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2021/png/12821255/1627540554845-c4125211-5a8d-411c-9967-e78ab6a18532.png#align=left&display=inline&height=362&margin=%5Bobject%20Object%5D&originHeight=362&originWidth=353&size=0&status=done&style=none&width=353\",alt:\"\"}}),t._v(\"\\n可以看到,用\"),a(\"strong\",[t._v(\"data\")]),t._v(\"接收的值不能及时响应更新,用\"),a(\"strong\",[t._v(\"computed\")]),t._v(\"就可以.\\n\"),a(\"strong\",[t._v(\"知识点\")]),t._v(\":\"),a(\"code\",[t._v(\"Props\")]),t._v(\"，\"),a(\"code\",[t._v(\"methods\")]),t._v(\",\"),a(\"code\",[t._v(\"data\")]),t._v(\"和\"),a(\"code\",[t._v(\"computed\")]),t._v(\"的初始化都是在\"),a(\"code\",[t._v(\"beforeCreated\")]),t._v(\"和\"),a(\"code\",[t._v(\"created\")]),t._v(\"之间完成的。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是mapstate\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是mapstate\"}},[t._v(\"#\")]),t._v(\" 什么是mapState\")]),t._v(\" \"),a(\"p\",[t._v(\"表面意思:\"),a(\"code\",[t._v(\"mapState\")]),t._v(\"是\"),a(\"code\",[t._v(\"state\")]),t._v(\"的辅助函数\\n实际作用:当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，可以使用 \"),a(\"code\",[t._v(\"mapState\")]),t._v(\" 辅助函数帮助生成计算属性\\n使用方法:先要导入这个辅助函数.\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { mapState } from 'vuex'\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"然后就可以在\"),a(\"code\",[t._v(\"computed\")]),t._v(\"中使用\"),a(\"code\",[t._v(\"mapState\")]),t._v(\"了\\n用\"),a(\"code\",[t._v(\"mapState\")]),t._v(\"等这种辅助函数的时候，如果\"),a(\"strong\",[t._v(\"组件内部的命名\")]),t._v(\"和\"),a(\"strong\",[t._v(\"vuex内的命名\")]),t._v(\"是一致的,可以简写成\"),a(\"strong\",[t._v(\"数组\")]),t._v(\"方式。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//state.js\\nexport default {\\n    nickname:'Simba',\\n    age:20,\\n    gender:'男'\\n};\\n复制代码\\n\")])])]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//computed\\ncomputed: mapState(['nickname','age','gender'])\\n//上面的一句代码就相当于下面这些 是不是简洁了很多\\ncomputed:{\\n  nickname(){return this.$store.state.nickname}\\n  age(){return this.$store.state.age}\\n  gender(){return this.$store.state.gender}\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"如果需要自定义一个计算属性,需要\"),a(\"code\",[t._v(\"es6\")]),t._v(\"中的展开运算符：\"),a(\"strong\",[t._v(\"...\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"data(){\\n  return{\\n    count:14\\n  }\\n}\\ncomputed: {   \\n  value(){\\n   return \\\"姓名:\\\" + this.coount/7\\n},\\n  ...mapState(['nickname','age','gender'])\\n}\\n复制代码\\n\")])])]),a(\"h2\",{attrs:{id:\"getters以及mapgetters\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#getters以及mapgetters\"}},[t._v(\"#\")]),t._v(\" getters以及mapGetters\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是getters\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是getters\"}},[t._v(\"#\")]),t._v(\" 什么是getters\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"getters\")]),t._v(\"：对数据获取之前的再次编译，\"),a(\"code\",[t._v(\"getters\")]),t._v(\"的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。说白了就约等于\"),a(\"code\",[t._v(\"vue\")]),t._v(\"的\"),a(\"code\",[t._v(\"computed\")]),t._v(\",可以像使用\"),a(\"code\",[t._v(\"computed\")]),t._v(\"一样去使用\"),a(\"code\",[t._v(\"getters\")]),t._v(\",当然二者还是有区别的.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"如何使用getters\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用getters\"}},[t._v(\"#\")]),t._v(\" 如何使用getters\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"getters\")]),t._v(\"中的方法有两个默认参数\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"state\")]),t._v(\" 当前\"),a(\"code\",[t._v(\"VueX\")]),t._v(\"对象中的状态对象\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"getters\")]),t._v(\" 当前\"),a(\"code\",[t._v(\"getters\")]),t._v(\"对象，用于将\"),a(\"code\",[t._v(\"getters\")]),t._v(\"下的其他\"),a(\"code\",[t._v(\"getter\")]),t._v(\"拿来用\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('//state.js\\nexport default {\\n  name:\\'simba\\',\\n  age:\\'20\\'\\n};\\n//getters.js\\nexport default {\\n  // 第一个参数是state\\n  realName(state) {\\n    return \"姓名:\" + state.name\\n  },\\n  // 第二个参数可以访问getters\\n  nameAndAge(state, getters) {\\n    return \"年龄:\" + state.age +\";\"+ getters.realName\\n  }\\n};\\n复制代码\\n')])])]),a(\"h3\",{attrs:{id:\"如何访问getters\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何访问getters\"}},[t._v(\"#\")]),t._v(\" 如何访问getters\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"通过属性访问\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通过属性访问\"}},[t._v(\"#\")]),t._v(\" 通过属性访问\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"getter\")]),t._v(\" 会暴露为\"),a(\"code\",[t._v(\"store.getters\")]),t._v(\" 对象，我们可以以属性的形式访问这些值：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"store.getters.realName// -> 姓名:simba\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"注意\")]),t._v(\":\"),a(\"code\",[t._v(\"getter\")]),t._v(\" 在通过属性访问时是作为 \"),a(\"code\",[t._v(\"Vue\")]),t._v(\" 的响应式系统的一部分缓存其中的。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"通过方法访问\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通过方法访问\"}},[t._v(\"#\")]),t._v(\" 通过方法访问\")]),t._v(\" \"),a(\"p\",[t._v(\"我们可以通过让 \"),a(\"code\",[t._v(\"getters\")]),t._v(\" 返回一个函数，来实现给 \"),a(\"code\",[t._v(\"getters\")]),t._v(\" 传参。这样在对 \"),a(\"code\",[t._v(\"store\")]),t._v(\" 里的\"),a(\"strong\",[t._v(\"数组\")]),t._v(\"进行\"),a(\"strong\",[t._v(\"查询\")]),t._v(\"时非常有用。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"state:{\\n  todos:[\\n    {\\n      id:2,\\n      text:'…',\\n      done: false\\n    }\\n  ]\\n},\\ngetters: {\\n  getTodoById: (state) => (id) => {\\n    return state.todos.find(todo => todo.id === id)\\n  }\\n}\\nstore.getters.getTodoById(2) // -> { id: 2, text: ‘…’, done: false }\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"注意\")]),t._v(\":\"),a(\"code\",[t._v(\"getter\")]),t._v(\" 在通过方法访问时，每次都会去进行调用，而不会缓存结果。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"在组件中使用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在组件中使用\"}},[t._v(\"#\")]),t._v(\" 在组件中使用\")]),t._v(\" \"),a(\"p\",[t._v(\"我们在\"),a(\"code\",[t._v(\"computed\")]),t._v(\"中通过\"),a(\"code\",[t._v(\"this.$store.getters.xxx\")]),t._v(\"来绑定一个计算属性\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('//组件中\\n<template>\\n  <div class=\"hello\">\\n    <div>\\n        <div>{{message}}</div>\\n        <div>{{message2}}</div>\\n    </div>\\n  </div>\\n</template>\\ncomputed:{\\n   message(){\\n     return this.$store.getters.realName \\n   },\\n   message2(){\\n     return this.$store.getters.nameAndAge; \\n   }\\n},\\n复制代码\\n')])])]),a(\"p\",[t._v(\"结果如下:\\n\"),a(\"img\",{attrs:{src:\"https://cdn.nlark.com/yuque/0/2021/png/12821255/1627540554745-a88381ce-79fb-430f-8303-16f823858145.png#align=left&display=inline&height=300&margin=%5Bobject%20Object%5D&originHeight=300&originWidth=326&size=0&status=done&style=none&width=326\",alt:\"\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是mapgetters\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是mapgetters\"}},[t._v(\"#\")]),t._v(\" 什么是mapGetters\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"mapGetters\")]),t._v(\" 辅助函数仅仅是将 \"),a(\"code\",[t._v(\"store\")]),t._v(\" 中的 \"),a(\"code\",[t._v(\"getter\")]),t._v(\" 映射到局部计算属性：\\n使用方法:先要导入这个辅助函数.\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { mapGetters } from 'vuex'\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"然后就可以在\"),a(\"code\",[t._v(\"computed\")]),t._v(\"中使用\"),a(\"code\",[t._v(\"mapGetters\")]),t._v(\" 了\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('computed: {\\n  ...mapGetters({\\n    message: \"realName\",\\n    message2: \"nameAndAge\"\\n  })\\n},\\n复制代码\\n')])])]),a(\"p\",[t._v(\"是不是简洁了很多,如果\"),a(\"strong\",[t._v(\"计算属性的名\")]),t._v(\"和\"),a(\"strong\",[t._v(\"getters的名字\")]),t._v(\"相同,还可以使用数组简写形式\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('computed: {\\n  ...mapGetters([\"realName\",\"nameAndAge\"])\\n},\\n复制代码\\n')])])]),a(\"h2\",{attrs:{id:\"mutation以及mapmutation\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mutation以及mapmutation\"}},[t._v(\"#\")]),t._v(\" mutation以及mapMutation\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是mutation\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是mutation\"}},[t._v(\"#\")]),t._v(\" 什么是mutation\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"mutation\")]),t._v(\"是操作\"),a(\"code\",[t._v(\"state\")]),t._v(\"数据的方法的集合，比如对该数据的\"),a(\"strong\",[t._v(\"修改、增加、删除\")]),t._v(\"等等。\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"中通常存放一些\"),a(\"strong\",[t._v(\"同步修改状态\")]),t._v(\"的方法.\\n\"),a(\"strong\",[t._v(\"注意\")]),t._v(\":更改 \"),a(\"strong\",[t._v(\"Vuex\")]),t._v(\" 的 \"),a(\"strong\",[t._v(\"store\")]),t._v(\" 中的状态的唯一方法是提交 \"),a(\"strong\",[t._v(\"mutation\")]),t._v(\"。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"如何使用mutation\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用mutation\"}},[t._v(\"#\")]),t._v(\" 如何使用mutation\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"mutations\")]),t._v(\"方法都有默认的形参：\"),a(\"code\",[t._v(\"mutation([state] [,payload])\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"state\")]),t._v(\" 当前\"),a(\"code\",[t._v(\"VueX\")]),t._v(\"对象中的\"),a(\"code\",[t._v(\"state\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"payload\")]),t._v(\" 载荷(该方法在被调用时传递的参数)\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//state.js\\nexport default {\\n  name:'韩志伟'\\n};\\n//mutations.js\\nexport default {\\n changeName(state, name) {\\n    state.name = name;\\n  },\\n};\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"我们需要这样去调用\"),a(\"code\",[t._v(\"mutation\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"this.$store.commit('changeName','吴彦祖')\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"例如我们在组件的\"),a(\"code\",[t._v(\"methods\")]),t._v(\"中修改一下\"),a(\"code\",[t._v(\"name\")]),t._v(\"属性\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods: {\\n    changeName(name){\\n      this.$store.commit('changeName',name);\\n    },\\n}\\n//调用changeName方法\\nmounted(){\\n  this.changeName('吴彦祖')\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"当需要多参提交时，可以把他们放在一个对象中\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"this.$store.commit('changeName',{firstName:'han',lastName:'zhiwei'})\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"也可以用另外一种传参的方式\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"this.$store.commit({\\n    type:'changeName',\\n    payload:{\\n        firstName:'han',\\n        lastName:'zhiwei'\\n    }\\n})\\n复制代码\\n\")])])]),a(\"h3\",{attrs:{id:\"什么是mapmutation\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是mapmutation\"}},[t._v(\"#\")]),t._v(\" 什么是mapMutation\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"mapMutation\")]),t._v(\"辅助函数仅仅是将 \"),a(\"code\",[t._v(\"store\")]),t._v(\" 中的 \"),a(\"code\",[t._v(\"mutation\")]),t._v(\" 映射到组件\"),a(\"code\",[t._v(\"methods\")]),t._v(\"中\\n使用方法:先要导入这个辅助函数.\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { mapMutation} from 'vuex'\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"然后就可以在\"),a(\"code\",[t._v(\"methods\")]),t._v(\"中使用\"),a(\"code\",[t._v(\"mapMutation\")]),t._v(\"了\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods:{\\n ...mapMutations({\\n      changeName:'changeName',\\n    })\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"这个代码等同于下面这段\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"changeName(payLoad){\\n  this.$store.commit('changeName',payLoad)\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"如果\"),a(\"strong\",[t._v(\"方法名\")]),t._v(\"和\"),a(\"strong\",[t._v(\"mutation\")]),t._v(\"名字一样 可以简写成下面这样\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods:{\\n ...mapMutations(['changeName'])\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"还可以使用常量替代\"),a(\"code\",[t._v(\"mutations\")]),t._v(\"事件类型\\n在\"),a(\"code\",[t._v(\"store\")]),t._v(\"文件夹下面新建\"),a(\"code\",[t._v(\"mutation-types.js\")]),t._v(\"文件\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//mutation-types.js\\nexport const ADD_AGE = 'ADD_AGE'\\n//mutations.js\\nimport * as types from './mutation-types';\\nexport default {\\n  [types.ADD_AGE](state, payLoad) {\\n    state.age += payLoad.number\\n  }\\n}\\n//组件中js部分\\n ...mapMutations([types.ADD_AGE]),\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"但是这个不是很常用,知道有这个知识点就可以了\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"增删state中的成员\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#增删state中的成员\"}},[t._v(\"#\")]),t._v(\" 增删state中的成员\")]),t._v(\" \"),a(\"p\",[t._v(\"既然讲到了如何修改\"),a(\"code\",[t._v(\"state\")]),t._v(\"的值,顺便提一下如何增删\"),a(\"code\",[t._v(\"state\")]),t._v(\"中的成员\\n\"),a(\"strong\",[t._v(\"Vue.set 为某个对象设置成员的值，若不存在则新增\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('Vue.set(state,\"age\",22)\\n复制代码\\n')])])]),a(\"p\",[a(\"strong\",[t._v(\"Vue.delete 删除成员\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"Vue.delete(state,'age')\\n复制代码\\n\")])])]),a(\"h2\",{attrs:{id:\"actions以及mapactions\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#actions以及mapactions\"}},[t._v(\"#\")]),t._v(\" actions以及mapActions\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是actions\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是actions\"}},[t._v(\"#\")]),t._v(\" 什么是actions\")]),t._v(\" \"),a(\"p\",[t._v(\"由于直接在\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"方法中进行异步操作，可能会引起数据失效。所以提供了\"),a(\"code\",[t._v(\"Actions\")]),t._v(\"来专门进行异步操作，类似于\"),a(\"strong\",[t._v(\"axios请求\")]),t._v(\",最终通过提交\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"方法来修改\"),a(\"code\",[t._v(\"state\")]),t._v(\"中的值。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"如何使用actions\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用actions\"}},[t._v(\"#\")]),t._v(\" 如何使用actions\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"Actions\")]),t._v(\"中的方法有两个默认参数: \"),a(\"code\",[t._v(\"Action([context ] [,payload])\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"context\")]),t._v(\" 上下文对象 包含\"),a(\"code\",[t._v(\"dispatch\")]),t._v(\" \"),a(\"code\",[t._v(\"commit\")]),t._v(\" \"),a(\"code\",[t._v(\"state\")]),t._v(\" \"),a(\"code\",[t._v(\"getters\")]),t._v(\" \"),a(\"code\",[t._v(\"rootState\")]),t._v(\" 可以使用\"),a(\"code\",[t._v(\"es6\")]),t._v(\"的解构赋值看起来更明确\"),a(\"code\",[t._v(\"{ commit }\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"payload\")]),t._v(\" 载荷(该方法在被调用时传递的参数)\")])]),t._v(\" \"),a(\"p\",[t._v(\"看一个例子,一秒钟以后提交\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"修改\"),a(\"code\",[t._v(\"state\")]),t._v(\"中的\"),a(\"code\",[t._v(\"name\")]),t._v(\"属性\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//state.js\\nexport default {\\n  name:'韩志伟'\\n};\\n//mutations.js\\nexport default {\\n changeName(state, name) {\\n    state.name = name;\\n  },\\n};  \\n//actions.js\\nexport default {\\n asyncChangeName({ commit } ,name) {\\n   setTimeout(() => {\\n     commit('changeName',name);\\n  }, 1000);\\n  },\\n};\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"我们需要这样去调用\"),a(\"code\",[t._v(\"action\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"this.$store.dispatch('asyncChangeName','吴彦祖')\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"例如我们在组件的\"),a(\"code\",[t._v(\"methods\")]),t._v(\"中修改一下\"),a(\"code\",[t._v(\"name\")]),t._v(\"属性\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods: {\\n    changeName(name){\\n      this.$store.dispatch('asyncChangeName',name);\\n    },\\n}\\n//调用changeName方法\\nmounted(){\\n  this.changeName('吴彦祖')\\n}\\n复制代码\\n\")])])]),a(\"p\",[a(\"code\",[t._v(\"action\")]),t._v(\"中也可以调用另一个\"),a(\"code\",[t._v(\"action\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//actions.js\\nexport default {\\n asyncChangeName({ dispatch }) {\\n   setTimeout(() => {\\n     dispatch('anotherAction');\\n  }, 1000);\\n  },\\n anotherAction(){\\n   console.log('另一个action被调用了')\\n }\\n};\\n复制代码\\n\")])])]),a(\"p\",[a(\"code\",[t._v(\"action\")]),t._v(\"中也可以传入\"),a(\"code\",[t._v(\"state\")]),t._v(\",以及\"),a(\"code\",[t._v(\"rootState\")]),t._v(\",至于什么是\"),a(\"code\",[t._v(\"rootState\")]),t._v(\",下面学习模块化\"),a(\"code\",[t._v(\"modules\")]),t._v(\"的时候就知道了\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//actions.js\\nexport default {\\n action({ state }) {\\n   setTimeout(() => {\\n      console.log(state.name)\\n  }, 1000);\\n  },\\n anotherAction({ rootState }){\\n   setTimeout(() => {\\n     console.log(rootState.name);\\n  }, 1000);\\n }\\n};\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"至于\"),a(\"code\",[t._v(\"actions\")]),t._v(\"的传参就与\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"一样了\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"this.$store.dispatch('changeName',{firstName:'han',lastName:'zhiwei'})\\n复制代码\\n\")])])]),a(\"h3\",{attrs:{id:\"什么是mapactions\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是mapactions\"}},[t._v(\"#\")]),t._v(\" 什么是mapActions\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"mapActions\")]),t._v(\"辅助函数仅仅是将 \"),a(\"code\",[t._v(\"store\")]),t._v(\" 中的 \"),a(\"code\",[t._v(\"actions\")]),t._v(\" 映射到组件\"),a(\"code\",[t._v(\"methods\")]),t._v(\"中\\n使用方法:先要导入这个辅助函数.\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { mapActions} from 'vuex'\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"然后就可以在\"),a(\"code\",[t._v(\"methods\")]),t._v(\"中使用\"),a(\"code\",[t._v(\"mapActions\")]),t._v(\"了\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods:{\\n ...mapActions({\\n      changeName:'changeName',\\n    })\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"这个代码等同于下面这段\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"changeName(payLoad){\\n  this.$store.dispatch('changeName',payLoad)\\n}\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"如果\"),a(\"strong\",[t._v(\"方法名\")]),t._v(\"和\"),a(\"strong\",[t._v(\"actions名字\")]),t._v(\"一样 可以简写成下面这样\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods:{\\n ...mapActions(['changeName'])\\n}\\n复制代码\\n\")])])]),a(\"h2\",{attrs:{id:\"modules模块化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#modules模块化\"}},[t._v(\"#\")]),t._v(\" modules模块化\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"什么是modules\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是modules\"}},[t._v(\"#\")]),t._v(\" 什么是modules\")]),t._v(\" \"),a(\"p\",[t._v(\"当项目庞大，状态非常多时，可以采用\"),a(\"strong\",[t._v(\"模块化管理模式\")]),t._v(\"。\"),a(\"code\",[t._v(\"Vuex\")]),t._v(\" 允许我们将 \"),a(\"code\",[t._v(\"store\")]),t._v(\" 分割成模块\"),a(\"code\",[t._v(\"（module）\")]),t._v(\"。每个模块拥有自己的 \"),a(\"code\",[t._v(\"state\")]),t._v(\"、\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"、\"),a(\"code\",[t._v(\"action\")]),t._v(\"、\"),a(\"code\",[t._v(\"getter\")]),t._v(\"。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"初始化modules\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化modules\"}},[t._v(\"#\")]),t._v(\" 初始化modules\")]),t._v(\" \"),a(\"p\",[t._v(\"前面我们学习了如何将\"),a(\"code\",[t._v(\"vuex\")]),t._v(\"的\"),a(\"code\",[t._v(\"index.js\")]),t._v(\"文件拆分成单个文件进行管理,所以我们依然对所有的模块进行单文件拆分管理,目录结构如下\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"store\\n│      \\n├─index.js\\n│            \\n├─state.js\\n│      \\n├─getters.js     \\n│\\n├─mutations.js      \\n│\\n├─actions.js        \\n│\\n└─modules\\n      │\\n      ├─moduleA // moduleA的结构与moduleB相同\\n      │\\n      └─moduleB\\n            │ \\n            ├─index.js\\n            │            \\n            ├─state.js\\n            │      \\n            ├─getters.js     \\n            │\\n            ├─mutations.js      \\n            │\\n            └─actions.js\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"1.首先根index.js中除了引入自身的state,getters,mutations,actions之外,还要引入两个模块的index.js并在export中导出modules\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import Vue from 'vue';\\nimport Vuex from 'vuex';\\nimport state from './state';\\nimport getters from './getters';\\nimport mutations from './mutations';\\nimport actions from './actions';\\nimport moduleA  from './modules/moduleA/index';\\nimport moduleB  from './modules/moduleB/index';\\nVue.use(Vuex);\\nexport default new Vuex.Store({\\n  state,\\n  mutations,\\n  actions,\\n  getters,\\n  modules: {\\n    moduleA,\\n    moduleB,\\n  },\\n});\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"2.在 moduleA 的index.js中导入moduleA的state,getters,mutations,actions. moduleB同理\")]),t._v(\" \"),a(\"strong\",[t._v(\"注意\")]),t._v(\":\"),a(\"code\",[t._v(\"getter\")]),t._v(\"，\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"，\"),a(\"code\",[t._v(\"action\")]),t._v(\" 他们默认都是注册在\"),a(\"strong\",[t._v(\"全局命名空间\")]),t._v(\"的，所以我们默认是可以和使用\"),a(\"strong\",[t._v(\"根状态\")]),t._v(\"一样去使用他们，这样就失去了\"),a(\"strong\",[t._v(\"模块化\")]),t._v(\"的意义，所以我们要在模块的\"),a(\"code\",[t._v(\"index.js\")]),t._v(\"中添加\"),a(\"code\",[t._v(\"namespaced: true\")]),t._v(\"使其成为带命名空间的模块。当模块被注册后，它的所有 \"),a(\"code\",[t._v(\"getter\")]),t._v(\"、\"),a(\"code\",[t._v(\"action\")]),t._v(\" 及 \"),a(\"code\",[t._v(\"mutation\")]),t._v(\" 都会自动根据\"),a(\"strong\",[t._v(\"模块注册的路径\")]),t._v(\"调整命名。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import state from './state';\\nimport getters from './getters';\\nimport mutations from './mutations';\\nimport actions from './actions';\\nconst moduleA = {\\n  namespaced: true,\\n  state: state,\\n  getters: getters,\\n  mutations: mutations,\\n  actions: actions,\\n};\\nexport default moduleA ;\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"3.moduleA下的state,getters,mutations,actions就和之前学习的一样导出就可以了\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//state.js\\nexport default {\\n  name:'hzw'\\n};\\n//mutations.js\\nexport default {\\n changeName(state, name) {\\n    state.name = name;\\n  },\\n};  \\n//以此类推\\n复制代码\\n\")])])]),a(\"h3\",{attrs:{id:\"如何在模块化中进行定义\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何在模块化中进行定义\"}},[t._v(\"#\")]),t._v(\" 如何在模块化中进行定义\")]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"state\")]),t._v(\"\\n正常写在各自的\"),a(\"code\",[t._v(\"state.js\")]),t._v(\"中即可\\n\"),a(\"strong\",[t._v(\"getter\")]),t._v(\" \"),a(\"code\",[t._v(\"getter\")]),t._v(\"的话，他会有三个参数，第一个是模块内的 \"),a(\"code\",[t._v(\"state\")]),t._v(\"，第二个是 模块内的 \"),a(\"code\",[t._v(\"getters\")]),t._v(\"，第三个是根节点状态 \"),a(\"code\",[t._v(\"rootState\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('//getters.js\\nexport default {\\n  nameAndAge(state, getters, rootState) {\\n    return \"年龄:\" + state.age +\";\"+ getters.realName + \"\" + rootState.name\\n  }\\n};\\n复制代码\\n')])])]),a(\"p\",[a(\"strong\",[t._v(\"mutation\")]),t._v(\" \"),a(\"code\",[t._v(\"mutation\")]),t._v(\" 传入的第一个参数也是模块内的 \"),a(\"code\",[t._v(\"state\")]),t._v(\"，其实就和根状态定义 \"),a(\"code\",[t._v(\"mutation\")]),t._v(\" 的时候一样\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"export default {\\n//这里的state是模块的局部状态\\n changeName(state, name) {\\n    state.name = name;\\n  },\\n};\\n复制代码\\n\")])])]),a(\"p\",[a(\"strong\",[t._v(\"actions\")]),t._v(\" \"),a(\"code\",[t._v(\"action\")]),t._v(\" 的话，他传入还是只有 \"),a(\"code\",[t._v(\"context\")]),t._v(\" 对象，这个对象里面的 \"),a(\"code\",[t._v(\"state\")]),t._v(\" 属性指模块内的状态，\"),a(\"code\",[t._v(\"rootState\")]),t._v(\" 指根状态，如下\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"export default {\\n changeName({ state,rootState }) {\\n        console.log(state.name)\\n        console.log(rootState .name)\\n    }\\n};\\n复制代码\\n\")])])]),a(\"h3\",{attrs:{id:\"如何在模块化中进行开发\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何在模块化中进行开发\"}},[t._v(\"#\")]),t._v(\" 如何在模块化中进行开发\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-state-获取\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-state-获取\"}},[t._v(\"#\")]),t._v(\" 1. state 获取\")]),t._v(\" \"),a(\"p\",[t._v(\"这个要在原来状态名前面加一个模块名才能取到到模块内的对象。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"this.$store.state.moduleA.name;\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"辅助函数也一样,\"),a(\"code\",[t._v(\"name\")]),t._v(\" 前面加个模块名\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"...mapState({     \\n  name: state => state.moduleA.name, \\n})\\n//简写\\n...mapState('moduleA',['name']),\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"获取根节点的状态还是和以前一样,不需要加\"),a(\"code\",[t._v(\"模块名\")]),t._v(\",也不需要加\"),a(\"code\",[t._v(\"root\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"...mapState(['name']),\\n复制代码\\n\")])])]),a(\"h4\",{attrs:{id:\"_2-getters获取\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-getters获取\"}},[t._v(\"#\")]),t._v(\" 2. getters获取\")]),t._v(\" \"),a(\"p\",[t._v(\"这个同样要在原来状态名前面加一个模块名才能取到到模块内的对象。\\n在获取根状态下的\"),a(\"code\",[t._v(\"getters\")]),t._v(\"不需要加模块名\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('store.getters.moduleA.realName\\n//map函数的第一个参数也同样需要加模块名\\ncomputed: {\\n  //获取moduleA下的getters\\n  ...mapGetters(\"moduleA\",[\"realName\",\"nameAndAge\"])\\n  //获取根状态下的getters\\n  ...mapGetters([\"realName\"])\\n},\\n复制代码\\n')])])]),a(\"h4\",{attrs:{id:\"_3-调用mutation以及action\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-调用mutation以及action\"}},[t._v(\"#\")]),t._v(\" 3.调用mutation以及action\")]),t._v(\" \"),a(\"p\",[t._v(\"根据\"),a(\"code\",[t._v(\"state\")]),t._v(\"和\"),a(\"code\",[t._v(\"getters\")]),t._v(\"推算,在调用模块内\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"和\"),a(\"code\",[t._v(\"action\")]),t._v(\"的时候肯定也需要加模块名\\n在调用根状态中的\"),a(\"code\",[t._v(\"mutation\")]),t._v(\"和\"),a(\"code\",[t._v(\"action\")]),t._v(\"的时候不需要加模块名\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"methods:{\\n//调用模块A下的action\\n ...mapActions('moduleA',['changeName'])\\n//调用模块A下的mutation\\n ...mapMutation('moduleB',['changeName'])\\n//调用根状态下的action\\n ...mapActions(['changeName'])\\n//调用根状态下的mutation\\n ...mapMutation(['changeName'])\\n}\\n复制代码\\n\")])])]),a(\"h4\",{attrs:{id:\"_4-需要特别注意的是-在模块中的action下调用根状态中的action和mutation需要将-root-true-作为第三个参数传入\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-需要特别注意的是-在模块中的action下调用根状态中的action和mutation需要将-root-true-作为第三个参数传入\"}},[t._v(\"#\")]),t._v(\" 4.需要特别注意的是,在模块中的action下调用根状态中的action和mutation需要将{root:true}作为第三个参数传入\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//moduleA下的actions.js\\nexport default {\\n AsyncChangeName({ commit } ,name) {\\n   setTimeout(() => {\\n     //调用的是根状态下的mutation\\n     commit('changeName',name,{ root: true });\\n     //调用的是根状态下的action\\n    dispatch('changeName',name,{ root: true });\\n    }, 1000);\\n  },\\n};\\n复制代码\\n\")])])]),a(\"h4\",{attrs:{id:\"_5-将模块中的action注册为全局\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-将模块中的action注册为全局\"}},[t._v(\"#\")]),t._v(\" 5.将模块中的action注册为全局\")]),t._v(\" \"),a(\"p\",[t._v(\"这个感觉和模块化的设计有点\"),a(\"strong\",[t._v(\"冲突\")]),t._v(\"，并且也不常用，知道有这个知识点即可，在声明\"),a(\"code\",[t._v(\"action\")]),t._v(\"的时候，添加\"),a(\"code\",[t._v(\"root:true\")]),t._v(\"并将 \"),a(\"code\",[t._v(\"action\")]),t._v(\" 的定义放到 \"),a(\"code\",[t._v(\"hanler\")]),t._v(\" 函数中，具体如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"//actions.js\\nexport default {\\n globalAction:{\\n  root:true,\\n  handler({ commit } ,name) {\\n   setTimeout(() => {\\n     commit('changeName',name);\\n   }, 1000);\\n  },\\n }\\n};\\n复制代码\\n\")])])]),a(\"p\",[t._v(\"到这里就完全可以使用\"),a(\"code\",[t._v(\"vuex\")]),t._v(\"进行开发任务了!\")]),t._v(\" \"),a(\"p\",[t._v(\"作者：一尾流莺\\n链接：\"),a(\"a\",{attrs:{href:\"https://juejin.cn/post/6973848448080543758\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://juejin.cn/post/6973848448080543758\"),a(\"OutboundLink\")],1),t._v(\"\\n来源：掘金\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\")])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}